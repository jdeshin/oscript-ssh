<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScriptEngine.HostedScript</name>
    </assembly>
    <members>
        <member name="M:ScriptEngine.HostedScript.Library.ArrayImpl.Constructor(ScriptEngine.Machine.IValue[])">
            <summary>
            Позволяет задать измерения массива при его создании
            </summary>
            <param name="dimensions">Числовые размерности массива. Например, "Массив(2,3)", создает двумерный массив 2х3.</param>
            <returns></returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer">
            <summary>
            
            Коллекция байтов фиксированного размера с возможностью произвольного доступа и изменения по месту.
            Размер буфера формально не ограничен, но поскольку все данные буфера полностью находятся в оперативной памяти, при попытке создать буфер слишком большого размера доступной памяти может оказаться недостаточно, в результате чего будет вызвано исключение. Поэтому при работе с буферами двоичных данных необходимо соотносить их размер с доступным объемом оперативной памяти.
            При создании буфера можно указать порядок байтов, который будет использован для операций с целыми числами. При этом если буфер не создан явно, а получен с помощью вызова метода другого объекта, то порядок байтов в полученном буфере будет унаследован от порядка байтов, заданного для того объекта, метод которого вызывается.
            Например, если буфер получен с помощью вызова метода ПрочитатьВБуферДвоичныхДанных, то порядок байтов в полученном буфере будет равен значению свойства ПорядокБайтов.
            Возможен также более сложный случай наследования порядка байтов. Если буфер получен с помощью вызова метода ПолучитьБуферДвоичныхДанных, то порядок байтов у полученного буфера будет выбираться из объекта ЧтениеДанных, из которого был получен объект РезультатЧтенияДанных. 
            Порядок байтов, заданный для объекта ЧтениеДанных, будет использован во всех объектах, полученных на его основании.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
             <param name="size">
             Размер буфера в байтах. </param>
             <param name="byteOrder">
             Порядок байтов.
             Значение по умолчанию: LittleEndian. </param>
            
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.ByteOrder">
            <summary>
            
            Текущий порядок байтов. Влияет на операции чтения и записи целых чисел в буфер.
            </summary>
            <value>ПорядокБайтов (ByteOrder)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Size">
            <summary>
            
            Размер буфера в байтах.
            </summary>
            <value>Число (Number)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.ReadOnly">
            <summary>
            
            Значение Истина указывает, что данный буфер предназначен только для чтения.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Write(System.Int32,ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer,System.Int32)">
             <summary>
             
             Заменить значения, начиная с заданной позиции, значениями из заданного буфера.
             </summary>
            
             <param name="position">
             Позиция, начиная с которой требуется записать содержимое буфера. </param>
             <param name="bytes">
             Байты, которыми нужно заполнить часть буфера. </param>
             <param name="number">
             Количество байт, которые требуется заменить. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.WriteInt16(System.Int32,System.Int32,ScriptEngine.Machine.IValue)">
             <summary>
             
             Записать целое 16-битное положительное число в заданную позицию.
             </summary>
            
             <param name="position">
             Позиция, на которой требуется записать число. </param>
             <param name="value">
             Число, которое требуется записать.
             Если значение не помещается в 16 бит, будет вызвано исключение. </param>
             <param name="byteOrder">
             Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных.
             Значение по умолчанию: Неопределено. </param>
            
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.WriteInt32(System.Int32,System.Int32,ScriptEngine.Machine.IValue)">
             <summary>
             
             Записать целое 32-битное положительное число в заданную позицию.
             </summary>
            
             <param name="position">
             Позиция, на которой требуется записать число. </param>
             <param name="value">
             Число, которое требуется записать.
             Если значение не помещается в 32 бита, будет вызван исключение. </param>
             <param name="byteOrder">
             Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных.
             Значение по умолчанию: Неопределено. </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.WriteInt64(System.Int32,System.Int64,ScriptEngine.Machine.IValue)">
             <summary>
             
             Записать целое 64-битное положительное число в заданную позицию.
             </summary>
            
             <param name="position">
             Позиция, на которой требуется записать число. </param>
             <param name="value">
             Число, которое требуется записать.
             Если значение не помещается в 64 бита, будет вызвано исключение. </param>
             <param name="byteOrder">
             Порядок байтов, который будет использован для кодировки числа при записи в буфер. Если не установлен, то используется порядок байтов, заданный для текущего экземпляра БуферДвоичныхДанных.
             Значение по умолчанию: Неопределено. </param>
            
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Reverse">
             <summary>
             
             Создает новый буфер, содержащий элементы текущего буфера в противоположном порядке.
             </summary>
            
            
             <returns name="BinaryDataBuffer"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Get(System.Int32)">
             <summary>
             
             Получает значение элемента на указанной позиции.
             </summary>
            
             <param name="position">
             Позиция элемента в буфере. Нумерация начинается с 0. </param>
            
             <returns name="Number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.GetSlice(System.Int32,ScriptEngine.Machine.IValue)">
             <summary>
             Создает новый буфер, использующий заданное количество байтов из исходного буфера, начиная с заданной позиции (нумерация с 0). Если количество не задано, то новый буфер является представлением элементов текущего буфера, начиная с заданного индекса и до конца.
             
             НЕ РЕАЛИЗОВАН
             </summary>
            
             <param name="position">
             Позиция, начиная с которой будет создан новый буфер. </param>
             <param name="number">
             Количество байтов, которые требуется отобразить в срезе. Если на задано, то отображаются все байты от начала среза до конца исходного буфера.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="BinaryDataBuffer">
             </returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Read(System.Int32,System.Int32)">
             <summary>
             
             Выполняет чтение байтов из буфера и помещает их в новый буфер.
             </summary>
            
             <param name="position">
             Позиция, начиная с которой требуется прочитать байты. </param>
             <param name="number">
             Количество байтов, которое требуется прочитать. </param>
            
             <returns name="BinaryDataBuffer"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.ReadInt16(System.Int32,ScriptEngine.Machine.IValue)">
             <summary>
             
             Выполняет чтение целого 16-битного положительного числа на заданной позиции.
             </summary>
            
             <param name="position">
             Позиция, на которой требуется прочитать число. </param>
             <param name="byteOrder">
             Порядок байтов, используемый при чтении числа.
             Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="Number"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.ReadInt32(System.Int32,ScriptEngine.Machine.IValue)">
             <summary>
             
             Прочитать целое 32-битное положительное число на заданной позиции.
             </summary>
            
             <param name="position">
             Позиция, на которой требуется прочитать число. </param>
             <param name="byteOrder">
             Порядок байтов, используемый при чтении числа.
             Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="Number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.ReadInt64(System.Int32,ScriptEngine.Machine.IValue)">
             <summary>
             
             Выполняет чтение целого 64-битного положительного числа на заданной позиции.
             </summary>
            
             <param name="position">
             Позиция, на которой требуется прочитать число. </param>
             <param name="byteOrder">
             Порядок байтов, используемый при чтении числа.
             Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="Number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Split(ScriptEngine.Machine.IValue)">
             <summary>
             Разделить буфер на части по заданному разделителю.
             
             НЕ РЕАЛИЗОВАН
             </summary>
            
             <remarks>
             
             По двоичному буферу
             </remarks>
            
             <param name="separator">
             Разделитель. </param>
            
             <returns name="Array"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Copy">
             <summary>
             
             Создает копию массива.
             </summary>
            
            
             <returns name="BinaryDataBuffer"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Concat(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer)">
             <summary>
             
             Создает новый буфер, содержащий элементы текущего буфера и, за ними, элементы заданного буфера.
             </summary>
            
             <param name="buffer">
             Буфер, который будет соединен с исходным. </param>
            
             <returns name="BinaryDataBuffer"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.Set(System.Int32,System.Int32)">
             <summary>
             
             Устанавливает значение элемента на заданной позиции (нумерация начинается с 0).
             </summary>
            
             <param name="position">
             Позиция, на которую требуется поместить новое значение. </param>
             <param name="value">
             Значение, которое требуется установить в заданную позицию буфера.
             Если значение больше 255 или меньше 0, будет выдана ошибка о неверном значении параметра. </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer.SetReadOnly">
             <summary>
             
             Переводит текущий буфер в режим "только для чтения". 
             Попытка изменить состояние буфера приведет к вызову исключения.
             </summary>
            
            
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.BinaryDataContext.OpenStreamForRead">
             <summary>
             
             Открывает поток для чтения двоичных данных.
             </summary>
            
            
             <returns name="Stream">
             Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. 
             Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.</returns>
            
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.DataReader">
            <summary>
            
            Объект предназначен для чтения различных типов данных из источника данных. В качестве источника могут выступать Поток, Файл или ДвоичныеДанные.
            Необходимо соблюдать следующий порядок работы с данным объектом:
            
             - Создать объект ЧтениеДанных на основании источника данных.
             - Выполнить требуемые действия с помощью объекта.
             - Закрыть экземпляр объекта ЧтениеДанных.
            При необходимости использовать другие методы для работы с источником данных, требуется сначала закрыть экземпляр объекта ЧтениеДанных с помощью метода Закрыть, выполнить необходимые действия над источником, установить требуемую позицию для чтения из источника и создать новый экземпляр ЧтениеДанных.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,System.Nullable{ScriptEngine.HostedScript.Library.Binary.ByteOrderEnum},System.String,System.String)">
             <summary>
             
             Создает объект для чтения из заданного объекта ДвоичныеДанные.
             После завершения работы с объектом ЧтениеДанных до того, как будет закрыт поток, переданный в конструктор, объект следует закрыть с помощью метода Закрыть или НачатьЗакрытие.
             </summary>
            
             <param name="dataSource">
             Путь к файлу или экземпляр объекта ДвоичныеДанные, из которого будет выполнено чтение. </param>
             <param name="textEncoding">
             Определяет кодировку текста, используемую для чтения данных. По-умолчанию используется кодировка UTF-8.
             Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.
             
             Значение по умолчанию: UTF8. Типы: КодировкаТекста (TextEncoding), Строка (String) </param>
             <param name="byteOrder">
             Порядок байтов, используемый для декодирования целых чисел при чтении из потока.
             Значение по умолчанию: LittleEndian. </param>
             <param name="lineSplitter">
             Определяет строку, разделяющую строки в двоичных данных.
             Значение по умолчанию: Неопределено. </param>
             <param name="convertibleSplitterOfLines">
             Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС.
             Значение по умолчанию: ВК + ПС. </param>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataReader.TextEncoding">
            <summary>
            
            Кодировка текста, используемая по-умолчанию для данного экземпляра ЧтениеДанных.
            Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataReader.ConvertibleSplitterOfLines">
            <summary>
            
            Конвертируемый разделитель строк. Этот параметр влияет на поведение метода ПрочитатьСимволы.
            </summary>
            <value>Строка (String)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataReader.ByteOrder">
            <summary>
            
            Порядок байтов по умолчанию.
            </summary>
            <value>ПорядокБайтов (ByteOrder)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataReader.LineSplitter">
            <summary>
            
            Разделитель строк по-умолчанию. Это свойство влияет на поведение метода ПрочитатьСтроку.
            </summary>
            <value>Строка (String)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadCompleted">
            <summary>
            
            Содержит признак того, что во входном потоке больше нет данных для чтения. Изначально устанавливается в значение Ложь. Если при очередном чтении было прочитано меньше данных, чем было запрошено, принимает значение Истина.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.Close">
             <summary>
             
             Вызов данного метода завершает работу с текущим объектом. Если объект является владельцем вложенного потока, поток также закрывается.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.SourceStream">
             <summary>
             
             Получает исходный поток, из которого выполняется чтение данных.
             </summary>
            
            
             <returns name="Stream">
             </returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.Skip(System.Int64)">
             <summary>
             
             Пропускает при чтении указанное количество байтов в потоке.
             </summary>
            
             <param name="number">
             Количество байтов, которые требуется пропустить. </param>
            
             <returns name="Number">
             </returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.SkipTo(ScriptEngine.Machine.IValue)">
             <summary>
             
             Пропускает при чтении двоичные данные до указанного разделителя.
             </summary>
            
             <remarks>
             
             Пропуск до двоичного маркера
             </remarks>
            
             <param name="marker">
             Маркер, до которого требуется пропустить данные. </param>
            
             <returns name="Number"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.Read(System.Int32)">
             <summary>
             
             Выполняет чтение двоичных данных заданного размера из потока. Если размер не указан, будут прочитаны все данные до конца потока.
             </summary>
            
             <param name="number">
             Количество байтов, которые требуется прочитать. Если не задано, то выполняется чтение всех данных до конца потока.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="ReadDataResult">
             Содержит описание результата чтения данных из потока.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadByte">
             <summary>
             
             Выполняет чтение одного байта из потока.
             </summary>
            
             <returns name="Number"/>
             
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadIntoBinaryDataBuffer(ScriptEngine.Machine.IValue,System.Int32,System.Int32)">
             <summary>
             
             Прочитать байты из потока в БуферДвоичныхДанных.
             </summary>
            
             <remarks>
             
             Чтение в существующий буфер
             </remarks>
            
             <param name="buffer">
             Буфер двоичных данных, в который требуется поместить прочитанные байты. </param>
             <param name="positionInBuffer">
             Позиция в буфере, начиная с которой требуется записать прочитанные данные. </param>
             <param name="number">
             Количество байтов, которые требуется прочитать. </param>
            
             <returns name="BinaryDataBuffer"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadTo(ScriptEngine.Machine.IValue)">
             <summary>
             
             Выполняет чтение двоичных данных до указанного маркера.
             </summary>
            
             <remarks>
             
             Чтение до двоичного маркера
             </remarks>
            
             <param name="marker">
             Маркер, до которого выполняется чтение данных. </param>
            
             <returns name="ReadDataResult">
             Содержит описание результата чтения данных из потока.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadChars(System.Int32,ScriptEngine.Machine.IValue)">
             <summary>
             
             Выполняет чтение заданного количества символов из потока в виде строки. Если количество символов не задано, выполняется чтение всего остатка потока.
             </summary>
            
             <param name="count">
             Количество символов, которые требуется прочитать. Если не установлено, то будут прочитаны все символы до конца потока.
             Значение по умолчанию: Неопределено. </param>
             <param name="encoding">
             Определяет кодировку текста. Если не установлена, используется кодировка, заданная для данного объекта ЧтениеДанных.
             Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.
             Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String) </param>
            
             <returns name="String"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadLine(ScriptEngine.Machine.IValue,System.String)">
             <summary>
             
             Выполняет чтение строки текста до разделителя строки. Если разделитель не найден, чтение выполняется до конца потока.
             Если разделитель строки не задан явно, используется разделитель строки, указанный для данного экземпляра объекта ЧтениеДанных.
             </summary>
            
             <param name="encoding">
             Кодировка текста. Если не установлена, используется кодировка, заданная для текущего экземпляра ЧтениеДанных.
             Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String) </param>
             <param name="lineSplitter">
             Указывает строку, являющуюся разделителем строк в читаемых данных. Если параметр не указан, используется разделитель строк, указанный для текущего экземпляра объекта ЧтениеДанных.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="String"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadInt16(ScriptEngine.Machine.IValue)">
             <summary>
             
             Считывает 16-битное целое число из потока.
             </summary>
            
             <param name="byteOrder">
             Порядок байтов, используемый при чтении числа.
             Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="Number"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadInt32(ScriptEngine.Machine.IValue)">
             <summary>
             
             Прочитать 32-битное целое число из потока.
             </summary>
            
             <param name="byteOrder">
             Порядок байтов, используемый при чтении числа.
             Если не задан, используется порядок, определенный для текущего экземпляра ЧтениеДанных.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="Number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.ReadInt64(ScriptEngine.Machine.IValue)">
             <summary>
             
             Считывает 64-битное целое число из потока.
             </summary>
            
             <param name="byteOrder">
             Устанавливает порядок байтов, используя который число будет прочитано. Если порядок байтов не задан, то используется порядок байтов, определенный для текущего экземпляра ЧтениеДанных.
             Значение по умолчанию: Неопределено. </param>
            
             <returns name="Number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.Split(ScriptEngine.Machine.IValue)">
             <summary>
             
             Разделяет остаток данных по заданным разделителям.
             </summary>
            
             <remarks>
             
             По двоичному разделителю
             </remarks>
            
             <param name="separator">
             Двоичный разделитель данных. </param>
            
             <returns name="Array"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.Split(System.String,ScriptEngine.Machine.IValue)">
             <summary>
             
             Разделяет остаток данных по заданным разделителям.
             </summary>
            
             <remarks>
             
             По строковому разделителю
             </remarks>
            
             <param name="separator">
             Разделитель данных в виде строки. </param>
             <param name="encoding">
             Кодировка текста. Если не задана, то используется кодировка, заданная для текущего экземпляра объекта ЧтениеДанных.
             Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String) </param>
            
             <returns name="Array"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataReader.SplitInPartsOf(System.Int32)">
             <summary>
             
             Разделяет остаток данных на части заданного размера. Размер части указывается в байтах.
             </summary>
            
             <param name="partSizw">
             Размер части данных в байтах. </param>
            
             <returns name="Array"/>
            
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.DataWriter">
            <summary>
            
            Объект предназначен для удобной записи различных типов данных в приемник.
            Необходимо соблюдать следующий порядок работы с данным объектом:
            
             - Создать или получить приемник даных.
             - Вызвать из приемника экземпляр объекта ЗаписьДанных.
             - Выполнить требуемые действия с помощью объекта.
             - Закрыть экземпляр объекта ЗаписьДанных.
            При необходимости использовать другие методы для работы с данными, требуется сначала закрыть экземпляр объекта ЗаписьДанных с помощью метода Закрыть, выполнить необходимые действия над данными, установить требуемую позицию для чтения из приемника и создать новый экземпляр ЗаписьДанных.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,System.Nullable{ScriptEngine.HostedScript.Library.Binary.ByteOrderEnum},System.String,System.Boolean,System.String,System.Boolean)">
             <summary>
             
             Создает объект ЗаписьДанных для записи в указанный файл. Если файл с таким именем не существует, он будет создан. Параметр &lt;Дописать&gt; определяет, будут ли данные записаны в начало или в конец файла.
             После завершения работы с объектом, до закрытия потока, переданного в конструктор, объект необходимо закрыть с помощью метода Закрыть или НачатьЗакрытие. При этом используемый файл будет закрыт автоматически.
             </summary>
            
             <param name="fileName">
             Имя файла, в который будет выполнена запись. </param>
             <param name="textEncoding">
             Кодировка текста для создаваемого экземпляра ЗаписьДанных. Если не задана, то используется UTF-8.
             Значение по умолчанию: UTF8. Типы: КодировкаТекста (TextEncoding), Строка (String) </param>
             <param name="byteOrder">
             Порядок байтов, используемый по умолчанию для кодирования целых чисел при записи в поток.
             Значение по умолчанию: LittleEndian. </param>
             <param name="lineSplitter">
             Разделитель по умолчанию для строк, записываемых в поток. Если разделитель строк не задан, то используется строка ПС.
             Значение по умолчанию: ПС. </param>
             <param name="append">
             Определяет, будут ли данные записаны в начало или в конец файла:
             
              - Если Истина, то при открытии существующего файла запись будет выполнена в конец файла.
              - Иначе данные будут записываться с начала файла, перезаписывая существующие данные.
             Если заданный файл не существует, будет создан новый файл с указанным именем и значение параметра не повлияет на поведение конструктора.
             Значение по умолчанию: Ложь. </param>
             <param name="convertibleSplitterOfLines">
             Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС.
             Значение по умолчанию: ВК + ПС. </param>
             <param name="writeBOM">
             Если в начало файла или потока требуется записать метку порядка байтов (BOM) для используемой кодировки текста, то данный параметр должен иметь значение Истина.
             Значение по умолчанию: Ложь. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.ConstructorByStream(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,System.Nullable{ScriptEngine.HostedScript.Library.Binary.ByteOrderEnum},System.String,System.String,System.Boolean)">
             <summary>
             
             Объект создается для записи в заданный поток.
             После завершения работы с объектом, до закрытия потока, переданного в конструктор, объект необходимо закрыть с помощью метода Закрыть или НачатьЗакрытие.
             </summary>
            
             <param name="stream">
             Поток, в который производится запись данных. Типы: Поток (Stream), ПотокВПамяти (MemoryStream), ФайловыйПоток (FileStream) </param>
             <param name="textEncoding">
             Устанавливает кодировку текста для создаваемого экземпляра ЗаписьДанных. Если не задано, используется кодировка UTF-8.
             Значение по умолчанию: UTF8. Типы: КодировкаТекста (TextEncoding), Строка (String) </param>
             <param name="byteOrder">
             Порядок байтов, используемый по умолчанию для кодирования целых чисел при записи в поток.
             Значение по умолчанию: LittleEndian. </param>
             <param name="lineSplitter">
             Разделитель по умолчанию для строк, записываемых в поток. Если разделитель строк не задан, то используется строка ПС.
             Значение по умолчанию: ПС. </param>
             <param name="convertibleSplitterOfLines">
             Определяет разделение строк в файле для конвертации в стандартный перевод строк ПС.
             Значение по умолчанию: ВК + ПС. </param>
             <param name="writeBOM">
             Если в начало файла или потока требуется записать метку порядка байтов (BOM) для используемой кодировки текста, то данный параметр должен иметь значение Истина.
             Значение по умолчанию: Ложь. </param>
            
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataWriter.TextEncoding">
            <summary>
            
            Кодировка текста по-умолчанию для данного экземпляра ЗаписьДанных.
            Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.
            </summary>
            <value>КодировкаТекста (TextEncoding), Строка (String)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataWriter.ConvertibleSplitterOfLines">
            <summary>
            
            Конвертируемый разделитель строк. Этот параметр влияет на поведение метода ЗаписатьСимволы.
            </summary>
            <value>Строка (String)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataWriter.ByteOrder">
            <summary>
            
            Порядок байтов по умолчанию.
            </summary>
            <value>ПорядокБайтов (ByteOrder)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.DataWriter.LineSplitter">
            <summary>
            
            Разделитель строк по-умолчанию. Это свойство влияет на поведение метода ЗаписатьСтроку.
            </summary>
            <value>Строка (String)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.Close">
             <summary>
             
             Вызывает метод СброситьБуферы. Если целевой поток был создан при создании объекта ЗаписьДанных, целевой поток также закрывается.
             </summary>
            
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.Write(ScriptEngine.Machine.IValue)">
             <summary>
             
             Записывает данные в целевой поток.
             </summary>
            
             <remarks>
             
             Запись двоичных данных
             </remarks>
            
             <param name="binaryDataOrReadResult">
             Записать экземпляр объекта ДвоичныеДанные в поток. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.WriteByte(System.Byte)">
             <summary>
             
             Записывает один байт в целевой поток.
             </summary>
            
             <param name="number">
             Целое число, которое будет записано в целевой поток. Значение числа должно находиться в диапазоне от 0 до 255. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.WriteBinaryDataBuffer(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer,System.Int32,System.Int32)">
             <summary>
             
             Записать байты из буфера двоичных данных в целевой поток.
             </summary>
            
             <remarks>
             
             Запись части байтов из буфера
             </remarks>
            
             <param name="buffer">
             Буфер двоичных данных, который используется в качестве источника данных для записи в целевой поток. </param>
             <param name="positionInBuffer">
             Позиция в буфере, начиная с которой выполняется чтение байтов для записи в целевой поток. </param>
             <param name="number">
             Количество байтов, которые требуется записать в целевой поток. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.WriteChars(System.String,ScriptEngine.Machine.IValue)">
             <summary>
             
             Записывает символы заданной строки в целевой поток.
             </summary>
            
             <param name="line">
             Строка, символы которой будут записаны в поток. </param>
             <param name="encoding">
             Определяет кодировку текста для записи строки. Если не установлена, используется кодировка, заданная для данного объекта ЗаписьДанных.
             Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.</param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.WriteLine(System.String,ScriptEngine.Machine.IValue,System.String)">
             <summary>
             
             Записывает строку в целевой поток.
             Сначала записываются все символы строки, затем - разделитель строк.
             </summary>
            
             <param name="line">
             Строка, которая будет записана в поток. </param>
             <param name="encoding">
             Определяет кодировку текста для записи строки. Если не установлена, используется кодировка, заданная для данного объекта ЗаписьДанных.
             Кодировка может быть задана как в виде значения перечисления КодировкаТекста, так и в виде строки с указанием названия кодировки.
             Значение по умолчанию: Неопределено. Типы: КодировкаТекста (TextEncoding), Строка (String) </param>
             <param name="lineSplitter">
             Указывает строку, являющуюся разделителем строк в потоке после записи символов строк. Если параметр не указан, используется разделитель строк, указанный для текущего экземпляра объекта ЗаписьДанных.
             Значение по умолчанию: Неопределено. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.WriteInt16(System.Int16,ScriptEngine.Machine.IValue)">
             <summary>
             
             Записывает 16-разрядное число в целевой поток.
             </summary>
            
             <param name="number">
             Число, которое будет записано в целевой поток.
             Значение числа должно находиться в диапазоне от 0 до 65535. </param>
             <param name="byteOrder">
             Порядок байтов, который будет использован для кодировки числа при записи. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра объекта ЗаписьДанных.
             Значение по умолчанию: Неопределено. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.WriteInt32(System.Int32,ScriptEngine.Machine.IValue)">
             <summary>
             
             Записать целое 32-битное число в целевой поток.
             </summary>
            
             <param name="number">
             Целое число, которое будет записано в целевой поток. Значение числа должно находиться в диапазоне от 0 до 2^32-1. </param>
             <param name="byteOrder">
             Порядок байтов, который будет использован для кодировки числа при записи. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра объекта ЗаписьДанных.
             Значение по умолчанию: Неопределено. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.WriteInt64(System.Int64,ScriptEngine.Machine.IValue)">
             <summary>
             
             Записывает целое 16-битное число в целевой поток.
             </summary>
            
             <param name="number">
             Целое число, которое будет записано в целевой поток. Значение числа должно находиться в диапазоне от 0 до 2^64-1. </param>
             <param name="byteOrder">
             Порядок байтов, который будет использован для кодировки числа при записи. Если не установлен, то будет использован порядок байтов, заданный для текущего экземпляра объекта ЗаписьДанных.
             Значение по умолчанию: Неопределено. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.Flush">
             <summary>
             
             Сбрасывает все внутренние буферы в целевой поток, после чего вызывает метод СброситьБуферы целевого потока.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.DataWriter.TargetStream">
             <summary>
             
             Возвращает целевой поток, в который выполняется запись.
             </summary>
            
            
             <returns name="Stream"/>
            
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter">
             <summary>
                 Converts base data types to an array of bytes, and an array of bytes to base
                 data types.
                 All info taken from the meta data of System.BitConverter. This implementation
                 allows for Endianness consideration.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.IsLittleEndian">
             <summary>
                 Indicates the byte order ("endianess") in which data is stored in this computer
                 architecture.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.DoubleToInt64Bits(System.Double)">
             <summary>
                 Converts the specified double-precision floating point number to a 64-bit
                 signed integer.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 A 64-bit signed integer whose value is equivalent to value.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.Boolean)">
            
             <summary>
                 Returns the specified Boolean value as an array of bytes.
            
             Parameters:
               value:
                 A Boolean value.
            
             Returns:
                 An array of bytes with length 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.Char)">
            
             <summary>
                 Returns the specified Unicode character value as an array of bytes.
            
             Parameters:
               value:
                 A character to convert.
            
             Returns:
                 An array of bytes with length 2.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.Double)">
            
             <summary>
                 Returns the specified double-precision floating point value as an array of
                 bytes.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 An array of bytes with length 8.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.Single)">
            
             <summary>
                 Returns the specified single-precision floating point value as an array of
                 bytes.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 An array of bytes with length 4.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.Int32)">
            
             <summary>
                 Returns the specified 32-bit signed integer value as an array of bytes.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 An array of bytes with length 4.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.Int64)">
            
             <summary>
                 Returns the specified 64-bit signed integer value as an array of bytes.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 An array of bytes with length 8.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.Int16)">
            
             <summary>
                 Returns the specified 16-bit signed integer value as an array of bytes.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 An array of bytes with length 2.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.UInt32)">
            
             <summary>
                 Returns the specified 32-bit unsigned integer value as an array of bytes.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 An array of bytes with length 4.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.UInt64)">
            
             <summary>
                 Returns the specified 64-bit unsigned integer value as an array of bytes.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 An array of bytes with length 8.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.GetBytes(System.UInt16)">
            
             <summary>
                 Returns the specified 16-bit unsigned integer value as an array of bytes.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 An array of bytes with length 2.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            
             <summary>
                 Converts the specified 64-bit signed integer to a double-precision floating
                 point number.
            
             Parameters:
               value:
                 The number to convert.
            
             Returns:
                 A double-precision floating point number whose value is equivalent to value.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a Boolean value converted from one byte at a specified position in
                 a byte array.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 true if the byte at startIndex in value is nonzero; otherwise, false.
            
             Exceptions:
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a Unicode character converted from two bytes at a specified position
                 in a byte array.
            
             Parameters:
               value:
                 An array.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A character formed by two bytes beginning at startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex equals the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a double-precision floating point number converted from eight bytes
                 at a specified position in a byte array.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A double precision floating point number formed by eight bytes beginning
                 at startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex is greater than or equal to the length of value minus 7, and is
                 less than or equal to the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a 16-bit signed integer converted from two bytes at a specified position
                 in a byte array.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A 16-bit signed integer formed by two bytes beginning at startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex equals the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a 32-bit signed integer converted from four bytes at a specified
                 position in a byte array.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A 32-bit signed integer formed by four bytes beginning at startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex is greater than or equal to the length of value minus 3, and is
                 less than or equal to the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a 64-bit signed integer converted from eight bytes at a specified
                 position in a byte array.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A 64-bit signed integer formed by eight bytes beginning at startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex is greater than or equal to the length of value minus 7, and is
                 less than or equal to the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a single-precision floating point number converted from four bytes
                 at a specified position in a byte array.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A single-precision floating point number formed by four bytes beginning at
                 startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex is greater than or equal to the length of value minus 3, and is
                 less than or equal to the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToString(System.Byte[])">
            
             <summary>
                 Converts the numeric value of each element of a specified array of bytes
                 to its equivalent hexadecimal string representation.
            
             Parameters:
               value:
                 An array of bytes.
            
             Returns:
                 A System.String of hexadecimal pairs separated by hyphens, where each pair
                 represents the corresponding element in value; for example, "7F-2C-4A".
            
             Exceptions:
               System.ArgumentNullException:
                 value is null.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            
             <summary>
                 Converts the numeric value of each element of a specified subarray of bytes
                 to its equivalent hexadecimal string representation.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A System.String of hexadecimal pairs separated by hyphens, where each pair
                 represents the corresponding element in a subarray of value; for example,
                 "7F-2C-4A".
            
             Exceptions:
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            
             <summary>
                 Converts the numeric value of each element of a specified subarray of bytes
                 to its equivalent hexadecimal string representation.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
               length:
                 The number of array elements in value to convert.
            
             Returns:
                 A System.String of hexadecimal pairs separated by hyphens, where each pair
                 represents the corresponding element in a subarray of value; for example,
                 "7F-2C-4A".
            
             Exceptions:
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex or length is less than zero.  -or- startIndex is greater than
                 zero and is greater than or equal to the length of value.
            
               System.ArgumentException:
                 The combination of startIndex and length does not specify a position within
                 value; that is, the startIndex parameter is greater than the length of value
                 minus the length parameter.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a 16-bit unsigned integer converted from two bytes at a specified
                 position in a byte array.
            
             Parameters:
               value:
                 The array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A 16-bit unsigned integer formed by two bytes beginning at startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex equals the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a 32-bit unsigned integer converted from four bytes at a specified
                 position in a byte array.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A 32-bit unsigned integer formed by four bytes beginning at startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex is greater than or equal to the length of value minus 3, and is
                 less than or equal to the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            
             <summary>
                 Returns a 64-bit unsigned integer converted from eight bytes at a specified
                 position in a byte array.
            
             Parameters:
               value:
                 An array of bytes.
            
               startIndex:
                 The starting position within value.
            
             Returns:
                 A 64-bit unsigned integer formed by the eight bytes beginning at startIndex.
            
             Exceptions:
               System.ArgumentException:
                 startIndex is greater than or equal to the length of value minus 7, and is
                 less than or equal to the length of value minus 1.
            
               System.ArgumentNullException:
                 value is null.
            
               System.ArgumentOutOfRangeException:
                 startIndex is less than zero or greater than the length of value minus 1.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.FileStreamContext">
            <summary>
            
            Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
            По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
            Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
            Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.CanWrite">
            <summary>
            
            Признак доступности записи в поток.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.CanSeek">
            <summary>
            
            Признак доступности произвольного изменения позиции чтения/записи в потоке.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.CanRead">
            <summary>
            
            Признак доступности чтения из потока.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.FileName">
            <summary>
            Содержит полное имя файла, включая путь
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.Close">
             <summary>
             
             Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение. 
             При повторном вызове данного метода никаких действий выполняться не будет.
             Выполняемое действие зависит от используемого типа потока.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.Write(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer,System.Int32,System.Int32)">
             <summary>
             
             Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере.
             Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.
             </summary>
            
             <param name="buffer">
             Буфер, из которого выбираются данные для записи. </param>
             <param name="positionInBuffer">
             Позиция в буфере, начиная с которой данные будут получены для записи в поток. </param>
             <param name="number">
             Количество байт, которые требуется записать. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.CopyTo(ScriptEngine.Machine.IValue,System.Int32)">
             <summary>
             
             Копирует данные из текущего потока в другой поток.
             </summary>
            
             <param name="targetStream">
             Поток, в который будет выполняться копирование. </param>
             <param name="bufferSize">
             Размер буфера, используемого при копировании.
             Если параметр не задан, то система подбирает размер буфера автоматически. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.Seek(System.Int32,ScriptEngine.HostedScript.Library.Binary.StreamPositionEnum)">
             <summary>
             
             Сдвигает текущую позицию потока на заданное количество байтов относительно начальной позиции. Если указано отрицательное смещение, позиция сдвигается в направлении к началу потока.
             Если изменение позиции недоступно (ДоступноИзменениеПозиции установлено в Ложь), будет сгенерировано исключение.
             </summary>
            
             <param name="offset">
             Количество байтов, на которое нужно передвинуть позицию в потоке. </param>
            <param name="initialPosition">
             Начальная позиция, от которой отсчитывается смещение. </param>
            <returns name="number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.GetReadonlyStream">
             <summary>
             
             Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись.
             </summary>
            
             <returns name="Stream"></returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.Read(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer,System.Int32,System.Int32)">
             <summary>
             
             Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов.
             Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение.
             При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.
             </summary>
            
             <param name="buffer">
             Буфер, в который выполняется чтение. </param>
             <param name="positionInBuffer">
             Позиция в целевом буфере, начиная с которой требуется записывать данные из потока. </param>
             <param name="number">
             Количество байт, которые требуется записать в целевой буфер. </param>
            
             <returns name="number">
             Возвращает число прочитанных байт
             </returns>
             
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.Size">
             <summary>
             
             Получает размер данных в байтах.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.Flush">
             <summary>
             
             Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.CurrentPosition">
             <summary>
             
             Возвращает текущую позицию в потоке.
             </summary>
            
            
             <returns name="number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamContext.SetSize(System.Int64)">
             <summary>
             
             Устанавливает размер потока.
             Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна.
             Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.
             </summary>
            
             <param name="size">
             Устанавливаемый размер потока. </param>
             
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.FileStreamsManager">
            <summary>
            
            Предоставляет методы для использования в типовых сценариях работы с файлами.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamsManager.Open(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
             <summary>
             
             Открывает файл в заданном режиме с возможностью чтения и записи. 
             Файл открывается в режиме разделяемого чтения.
             </summary>
            
             <param name="fileName">
             Имя открываемого файла. </param>
             <param name="openingMode">
             Режим открытия файла. </param>
             <param name="fileAccess">
             Режим доступа к файлу. </param>
             <param name="bufferSize">
             Размер буфера для операций с файлом. </param>
            
             <returns name="FileStream">
             Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
             По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
             Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
             Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamsManager.OpenForAppend(System.String)">
             <summary>
             
             Открыть существующий файл для записи в конец. Если файл не существует, то будет создан новый файл. Запись в существующий файл выполняется с конца файла. Файл открывается в режиме разделяемого чтения.
             </summary>
            
             <param name="fileName">
             Имя открываемого файла. </param>
             
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamsManager.OpenForWrite(System.String)">
             <summary>
             
             Открывает существующий файл для записи. Файл открывается в режиме разделяемого чтения. Если файл не найден, будет создан новый файл. Запись в существующий файл производится с начала файла, замещая ранее сохраненные данные.
             </summary>
            
             <param name="fileName">
             Имя открываемого файла. </param>
            
             <returns name="FileStream">
             Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
             По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
             Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
             Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamsManager.OpenForRead(System.String)">
             <summary>
             
             Открывает существующий файл для чтения с общим доступом на чтение.
             </summary>
            
             <param name="fileName">
             Имя открываемого файла. </param>
            
             <returns name="FileStream"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamsManager.Create(System.String,System.Int32)">
             <summary>
             
             Создает или перезаписывает файл и открывает поток с возможностью чтения и записи в файл. Файл открывается в режиме разделяемого чтения.
             </summary>
            
             <param name="fileName">
             Имя создаваемого файла. </param>
             <param name="bufferSize">
             Размер буфера. </param>
            
             <returns name="FileStream"/>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.FileStreamsManager.CreateTempFile(System.Int32,System.Int32)">
             <summary>
             НЕ РЕАЛИЗОВАН
             Создает временный файл и открывает его в монопольном режиме с возможностью чтения и записи. Дополнительно можно установить лимит в байтах, при превышении которого будет создан файл на диске. Пока размер файла не превышает данного лимита - вся работа ведётся в памяти.
             </summary>
            
             <param name="memoryLimit">
             Максимальный объем памяти (в байтах), при превышении которого будет создан файл на диске.
             Значение по умолчанию: 65535. </param>
             <param name="bufferSize">
             Размер буфера для операций с файлом (в байтах).
             Значение по умолчанию: 8192. </param>
            
             <returns name="FileStream"/>
             
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.GenericStream">
            <summary>
            
            Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. 
            Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.GenericStream.CanWrite">
            <summary>
            
            Признак доступности записи в поток.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.GenericStream.CanSeek">
            <summary>
            
            Признак доступности произвольного изменения позиции чтения/записи в потоке.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.GenericStream.CanRead">
            <summary>
            
            Признак доступности чтения из потока.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.Close">
             <summary>
             
             Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение. 
             При повторном вызове данного метода никаких действий выполняться не будет.
             Выполняемое действие зависит от используемого типа потока.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.Write(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer,System.Int32,System.Int32)">
             <summary>
             
             Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере.
             Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.
             </summary>
            
             <param name="buffer">
             Буфер, из которого выбираются данные для записи. </param>
             <param name="positionInBuffer">
             Позиция в буфере, начиная с которой данные будут получены для записи в поток. </param>
             <param name="number">
             Количество байт, которые требуется записать. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.CopyTo(ScriptEngine.Machine.IValue,System.Int32)">
             <summary>
             
             Копирует данные из текущего потока в другой поток.
             </summary>
            
             <param name="targetStream">
             Поток, в который будет выполняться копирование. </param>
             <param name="bufferSize">
             Размер буфера, используемого при копировании.
             Если параметр не задан, то система подбирает размер буфера автоматически. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.Seek(System.Int32,ScriptEngine.HostedScript.Library.Binary.StreamPositionEnum)">
             <summary>
             
             Сдвигает текущую позицию потока на заданное количество байтов относительно начальной позиции. Если указано отрицательное смещение, позиция сдвигается в направлении к началу потока.
             Если изменение позиции недоступно (ДоступноИзменениеПозиции установлено в Ложь), будет сгенерировано исключение.
             </summary>
            
             <param name="offset">
             Количество байтов, на которое нужно передвинуть позицию в потоке. </param>
            <param name="initialPosition">
             Начальная позиция, от которой отсчитывается смещение. </param>
            <returns name="Number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.GetReadonlyStream">
             <summary>
             
             Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись.
             </summary>
            
            
             <returns name="Stream">
             Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. 
             Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.Read(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer,System.Int32,System.Int32)">
             <summary>
             
             Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов.
             Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение.
             При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.
             </summary>
            
             <param name="buffer">
             Буфер, в который выполняется чтение. </param>
             <param name="positionInBuffer">
             Позиция в целевом буфере, начиная с которой требуется записывать данные из потока. </param>
             <param name="number">
             Количество байт, которые требуется записать в целевой буфер. </param>
            
             <returns name="number">
             Возвращает число прочитанных байт
             </returns>
             
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.Size">
             <summary>
             
             Получает размер данных в байтах.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.Flush">
             <summary>
             
             Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.CurrentPosition">
             <summary>
             
             Возвращает текущую позицию в потоке.
             </summary>
            
            
             <returns name="Number"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.GenericStream.SetSize(System.Int64)">
             <summary>
             
             Устанавливает размер потока.
             Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна.
             Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.
             </summary>
            
             <param name="size">
             Устанавливаемый размер потока. </param>
             
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext">
            <summary>
            
            Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. 
            Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.Constructor(ScriptEngine.Machine.IValue)">
             <summary>
             
             Создает поток, в качестве нижележащего хранилища для которого используется заданный байтовый буфер. Ёмкость потока ограничена размером буфера. При выходе за границы буфера будет сгенерировано исключение.
             Возможность записи в поток зависит от возможности изменения передаваемого буфера.
             </summary>
            
             <param name="bufferOrCapacity">
             Буфер, на основании которого будет создан поток или начальная емкость будущего потока. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.Constructor">
             <summary>
             
             Создает поток в памяти с расширяемой емкостью. Данный вариант можно использовать для работы с достаточно большими объемами данных, т.к. данные хранятся постранично, а не в виде одного последовательного блока.
             </summary>
            
            
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.CanWrite">
            <summary>
            
            Признак доступности записи в поток.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.CanSeek">
            <summary>
            
            Признак доступности произвольного изменения позиции чтения/записи в потоке.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.CanRead">
            <summary>
            
            Признак доступности чтения из потока.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.Close">
             <summary>
             
             Вызов данного метода завершает работу с потоком. При попытке вызвать любой метод объекта, кроме метода Закрыть, будет вызвано исключение. 
             При повторном вызове данного метода никаких действий выполняться не будет.
             Выполняемое действие зависит от используемого типа потока.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.Write(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer,System.Int32,System.Int32)">
             <summary>
             
             Записывает в поток заданное количество байтов из буфера по заданному смещению. Если в буфере меньше данных, чем требуется записать, вызывается исключение о недостаточном количестве данных в буфере.
             Запись в поток возможна только, если поток поддерживает запись. В противном случае при вызове метода будет вызвано исключение.
             </summary>
            
             <param name="buffer">
             Буфер, из которого выбираются данные для записи. </param>
             <param name="positionInBuffer">
             Позиция в буфере, начиная с которой данные будут получены для записи в поток. </param>
             <param name="number">
             Количество байт, которые требуется записать. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.CopyTo(ScriptEngine.Machine.IValue,System.Int32)">
             <summary>
             
             Копирует данные из текущего потока в другой поток.
             </summary>
            
             <param name="targetStream">
             Поток, в который будет выполняться копирование. </param>
             <param name="bufferSize">
             Размер буфера, используемого при копировании.
             Если параметр не задан, то система подбирает размер буфера автоматически. </param>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.Seek(System.Int32,ScriptEngine.HostedScript.Library.Binary.StreamPositionEnum)">
             <summary>
             
             Сдвигает текущую позицию потока на заданное количество байтов относительно начальной позиции. Если указано отрицательное смещение, позиция сдвигается в направлении к началу потока.
             Если изменение позиции недоступно (ДоступноИзменениеПозиции установлено в Ложь), будет сгенерировано исключение.
             </summary>
            
             <param name="offset">
             Количество байтов, на которое нужно передвинуть позицию в потоке. </param>
            <param name="initialPosition">
             Начальная позиция, от которой отсчитывается смещение. </param>
            <returns name="Number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.GetReadonlyStream">
             <summary>
             
             Возвращает поток, который разделяет данные и текущую позицию с данным потоком, но не разрешает запись.
             </summary>
            
             <returns name="Stream"/>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.Read(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer,System.Int32,System.Int32)">
             <summary>
             
             Выполняет чтение заданного количества байтов в указанный буфер по указанному смещению. Текущая позиция смещается вперед на фактическое количество прочитанных байтов.
             Чтение из потока возможно только, если поток поддерживает чтение. В противном случае, будет вызвано исключение.
             При чтении размер целевого буфера не меняется, а его содержимое перезаписывается фактически прочитанными данными. Если в буфере недостаточно места для записи прочитанных данных, происходит ошибка переполнения.
             </summary>
            
             <param name="buffer">
             Буфер, в который выполняется чтение. </param>
             <param name="positionInBuffer">
             Позиция в целевом буфере, начиная с которой требуется записывать данные из потока. </param>
             <param name="number">
             Количество байт, которые требуется записать в целевой буфер. </param>
            
             <returns name="number">
             Возвращает число прочитанных байт
             </returns>
             
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.Size">
             <summary>
             
             Получает размер данных в байтах.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.Flush">
             <summary>
             
             Сбрасывает все промежуточные буферы и производит запись всех незаписанных данных в целевое устройство.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.CurrentPosition">
             <summary>
             
             Возвращает текущую позицию в потоке.
             </summary>
            
            
             <returns name="Number">
             Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.SetSize(System.Int64)">
             <summary>
             
             Устанавливает размер потока.
             Если текущий размер превышает заданный, поток будет сокращен до заданного размера, а информация, превышающая заданный размер, будет потеряна.
             Если текущий размер потока меньше заданного, то содержимое потока между старым и новым размером не определено.
             </summary>
            
             <param name="size">
             Устанавливаемый размер потока. </param>
             
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.MemoryStreamContext.CloseAndGetBinaryData">
            <summary>
            закрывает поток и возвращает результат в виде двоичных данных
            </summary>
            <returns></returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Binary.ReadDataResult">
            <summary>
            
            Содержит описание результата чтения данных из потока.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.ReadDataResult.MarkerIndex">
            <summary>
            
            Индекс найденного маркера.
            </summary>
            <value>Число (Number)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.ReadDataResult.MarkerFound">
            <summary>
            
            Содержит признак обнаружения маркера:
            
             - Истина - если в процессе чтения данных был обнаружен маркер.
             - Ложь - если маркер не был найден или операция не предполагала поиска маркера.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Binary.ReadDataResult.Size">
            <summary>
            
            Размер данных в байтах. В некоторых случаях может быть равен нулю. Например, при чтении двоичных данных из конца потока или при разделении данных.
            </summary>
            <value>Число (Number)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.ReadDataResult.OpenStreamForRead">
             <summary>
             
             Открывает поток для чтения данных.
             </summary>
            
            
             <returns name="Stream">
             Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. 
             Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.ReadDataResult.GetBinaryDataBuffer">
             <summary>
             
             Получает результат в виде буфера двоичных данных. Необходимо учитывать, что при этом данные будут полностью загружены в оперативную память. Если требуется избежать загрузки оперативной памяти, следует использовать другие методы получения двоичных данных.
             </summary>
            
             <returns name="BinaryDataBuffer">
             Коллекция байтов фиксированного размера с возможностью произвольного доступа и изменения по месту.</returns>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Binary.ReadDataResult.GetBinaryData">
             <summary>
             
             Получает результат чтения в виде двоичных данных.
             </summary>
            
            
             <returns name="BinaryData"></returns>
            
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ConsoleContext">
            <summary>
            Класс представляет собой инструмент доступа к системной консоли.
            Предназначен для низкоуровнего манипулирования выводом в консоль.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ConsoleContext.InputEncoding">
            <summary>
            Возвращает или задает кодировку консоли, используемую при чтении входных данных.
            </summary>
            <returns>КодировкаТекста</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ConsoleContext.Beep">
            <summary>
            Воспроизводит звуковой сигнал.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.AvailableFreeSpace">
            <summary>
            Указывает объем доступного свободного места на диске в байтах.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.DriveFormat">
            <summary>
            Получает имя файловой системы
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.DriveTypeProp">
            <summary>
            Возвращает тип диска
            </summary>
            <value>ТипДиска</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.IsReady">
            <summary>
            Получает значение, указывающее состояние готовности диска.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.Name">
            <summary>
            Возвращает имя диска
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.RootDirectory">
            <summary>
            Возвращает корневой каталог диска.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.TotalFreeSpace">
            <summary>
            Возвращает общий объем свободного места, доступного на диске, в байтах
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.TotalSize">
            <summary>
            Возвращает общий размер места для хранения на диске в байтах.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.DriveInfo.DriveInfo.VolumeLabel">
            <summary>
            Возвращает или задает метку тома диска.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.DriveInfo.DriveTypeEnum">
            <summary>
            Типы дисков:
            - Диск является устройством оптических дисков, такие как компакт-ДИСК или DVD-диск.
            - Диск является жестким диском.
            - Диск является сетевым диском.
            - Диск не имеет корневой каталог.
            - Диск является диском ОЗУ.
            - Диск является съемное запоминающее устройство, например, дисковод гибких дисков или USB-устройство флэш-памяти.
            - Тип диска неизвестен.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.EnvironmentVariablesImpl.EnvironmentVariables(ScriptEngine.HostedScript.Library.EnvironmentVariableTargetEnum)">
            <summary>
            Возвращает соответствие переменных среды. Ключом является имя переменной, а значением - значение переменной
            </summary>
            <param name="target">Расположение переменной среды</param>
            <example>
            Для Каждого Переменная Из ПеременныеСреды() Цикл
                Сообщить(Переменная.Ключ + " = " + Переменная.Значение);
            КонецЦикла;
            </example>
            <returns>Соответствие</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.EnvironmentVariablesImpl.SetEnvironmentVariable(System.String,System.String,ScriptEngine.HostedScript.Library.EnvironmentVariableTargetEnum)">
            <summary>
            Позволяет установить переменную среды. 
            По умолчанию переменная устанавливается в области видимости процесса и очищается после его завершения.
            </summary>
            <param name="varName">Имя переменной</param>
            <param name="value">Значение переменной</param>
            <param name="target">Расположение переменной среды</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.EnvironmentVariablesImpl.GetEnvironmentVariable(System.String,ScriptEngine.HostedScript.Library.EnvironmentVariableTargetEnum)">
            <summary>
            Получить значение переменной среды.
            </summary>
            <param name="varName">Имя переменной</param>
            <param name="target">Расположение переменной среды</param>
            <returns>Строка. Значение переменной</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.CopyFile(System.String,System.String)">
            <summary>
            Копирует файл из одного расположения в другое. Перезаписывает приемник, если он существует.
            </summary>
            <param name="source">Имя файла-источника</param>
            <param name="destination">Имя файла приемника</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.MoveFile(System.String,System.String)">
            <summary>
            Перемещает файл из одного расположения в другое.
            </summary>
            <param name="source">Имя файла-источника</param>
            <param name="destination">Имя файла приемника</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.TempFilesDir">
            <summary>
            Возвращает каталог временных файлов ОС
            </summary>
            <returns>Строка. Путь к каталогу временных файлов</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.GetTempFilename(System.String)">
            <summary>
            Получает имя файла во временом каталоге.
            </summary>
            <param name="ext">Расширение будущего файла. Если не указано, то по умолчанию расширение равно ".tmp"</param>
            <returns>Строка. Полный путь ко временному файлу.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.FindFiles(System.String,System.String,System.Boolean)">
            <summary>
            Выполняет поиск файлов по маске
            </summary>
            <param name="dir">Каталог, в котором выполняется поиск</param>
            <param name="mask">Маска имени файла (включая символы * и ?)</param>
            <param name="recursive">Флаг рекурсивного поиска в поддиректориях</param>
            <returns>Массив объектов Файл, которые были найдены.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.DeleteFiles(System.String,System.String)">
            <summary>
            Удаление файлов
            </summary>
            <param name="path">Каталог из которого удаляются файлы, или сам файл.</param>
            <param name="mask">Маска файлов. Необязательный параметр. Если указан, то первый параметр трактуется, как каталог.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.CreateDirectory(System.String)">
            <summary>
            Создать каталог
            </summary>
            <param name="path">Имя нового каталога</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.CurrentDirectory">
            <summary>
            Получить текущий каталог
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.SetCurrentDirectory(System.String)">
            <summary>
            Установить каталог текущим
            </summary>
            <param name="path">Имя нового текущего каталога</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.GetPathSeparator">
            <summary>
            Получает разделитель пути в соответствии с текущей операционной системой
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.GetAllFilesMask">
            <summary>
            Получает маску "все файлы" для текущей операционной системы.
            В Windows маска принимает значение "*.*", в nix - "*".
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FileOperations.CombinePath(System.String,System.String,System.String,System.String)">
            <summary>
            Объединяет компоненты файлового пути, с учетом разделителей, принятых в данной ОС.
            При этом корректно, без дублирования, обрабатываются уже существующие разделители пути.
            </summary>
            <param name="path1">Первая часть пути</param>
            <param name="path2">Вторая часть пути</param>
            <param name="path3">Третья часть пути (необязательно)</param>
            <param name="path4">Четвертая часть пути (необязательно)</param>
            <returns>Объединенный путь.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FixedStructureImpl.Constructor(ScriptEngine.Machine.IValue)">
            <summary>
            Создает фиксированную структуру по исходной структуре
            </summary>
            <param name="structure">Исходная структура</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.FixedStructureImpl.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue[])">
            <summary>
            Создает фиксированную структуру по заданному перечню свойств и значений
            </summary>
            <param name="strProperties">Строка с именами свойств, указанными через запятую.</param>
            <param name="args">Значения свойств. Каждое значение передается, как отдельный параметр.</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.GlobalBinaryData">
            <summary>
            Глобальный контекст. Операции с двоичными данными.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBinaryData.ConcatenateBinaryData(ScriptEngine.HostedScript.Library.ArrayImpl)">
            <summary>
            Объединяет несколько объектов типа ДвоичныеДанные в один.
            </summary>
            <param name="array">Массив объектов типа ДвоичныеДанные.</param>
            <returns>Тип: ДвоичныеДанные.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBinaryData.SplitBinaryData(ScriptEngine.HostedScript.Library.Binary.BinaryDataContext,System.Int32)">
            <summary>
            Разделяет двоичные данные на части заданного размера. Размер задается в байтах.
            </summary>
            <param name="data">Объект типа ДвоичныеДанные.</param>
            <param name="size">Размер одной части данных.</param>
            <returns>Массив объектов типа ДвоичныеДанные.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBinaryData.GetBinaryDataFromString(System.String,ScriptEngine.Machine.IValue,System.Boolean)">
            <summary>
            Преобразует строку в значение типа ДвоичныеДанные с учетом кодировки текста.
            </summary>
            <param name="str">Строка, которую требуется преобразовать в ДвоичныеДанные.</param>
            <param name="encoding">Кодировка текста</param>
            <param name="useBOM">Определяет, будет ли добавлена метка порядка байт (BOM) кодировки текста в начало данных.</param>
            <returns>Тип: ДвоичныеДанные.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBinaryData.GetBinaryDataFromBase64String(System.String)">
            <summary>
            Преобразует строку формата Base64 в двоичные данные.
            </summary>
            <param name="str">Строка в формате Base64.</param>
            <returns>Тип: ДвоичныеДанные.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBinaryData.GetBinaryDataBufferFromBinaryData(ScriptEngine.HostedScript.Library.Binary.BinaryDataContext)">
            <summary>
            Преобразует двоичные данные в буфер двоичных данных.
            </summary>
            <param name="data">Двоичные данные.</param>
            <returns>Тип: БуферДвоичныхДанных.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBinaryData.GetBinaryDataFromBinaryDataBuffer(ScriptEngine.HostedScript.Library.Binary.BinaryDataBuffer)">
            <summary>
            Преобразует буфер двоичных данных в значение типа ДвоичныеДанные.
            </summary>
            <param name="buffer">Буфер двоичных данных.</param>
            <returns>Тип: ДвоичныеДанные.</returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.GlobalBitFunctions">
            <summary>
            Глобальный контекст. Побитовые операции с целыми числами.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.BitwiseAnd(System.UInt32,System.UInt32)">
            <summary>
            Выполняет побитовое И для заданных чисел.
            </summary>
            <param name="number1">Число 1</param>
            <param name="number2">Число 2</param>
            <returns>Число. Результат побитового И</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.BitwiseOr(System.UInt32,System.UInt32)">
            <summary>
            Выполняет побитовое Или для заданных чисел.
            </summary>
            <param name="number1">Число 1</param>
            <param name="number2">Число 2</param>
            <returns>Число. Результат побитового Или</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.BitwiseNot(System.UInt32)">
            <summary>
            Инвертирует биты числе.
            </summary>
            <param name="number1"></param>
            <returns>Число</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.BitwiseAndNot(System.UInt32,System.UInt32)">
            <summary>
            Выполняет преобразование, эквивалентное <code>ПобитовоеИ(Число1, ПобитовоеНе(Число2))</code>
            </summary>
            <param name="number1">Число 1</param>
            <param name="number2">Число 2</param>
            <returns>Число. Результат преобразования</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.BitwiseXor(System.UInt32,System.UInt32)">
            <summary>
            Выполняет побитовое Исключительное Или для заданных чисел.
            </summary>
            <param name="number1">Число 1</param>
            <param name="number2">Число 2</param>
            <returns>Число. Результат побитового Исключительного Или</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.CheckBit(System.UInt32,System.Int32)">
            <summary>
            Получает значение заданного бита.
            </summary>
            <param name="value">Число</param>
            <param name="bitNumber">Номер бита</param>
            <returns>Булево. Истина - бит установлен в 1, Ложь - бит установлен в 0</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.SetBit(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Устанавливает нужный бит числа в указанное значение 
            </summary>
            <param name="value">Число</param>
            <param name="bitNumber">Номер бита</param>
            <param name="bitValue">Значение бита</param>
            <returns>Число. Число с установленным в нужное значение битом</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.CheckByBitMask(System.UInt32,System.UInt32)">
            <summary>
            Проверяет соответствие числа битовой маске.
            </summary>
            <param name="value">Число</param>
            <param name="mask">Маска</param>
            <returns>Булево. Истина, когда в числе установлены в 1 все биты маски.
             Ложь - в остальных случаях</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.BitwiseShiftLeft(System.UInt32,System.Int32)">
            <summary>
            Выполняет побитовый сдвиг числа влево на заданное смещение
            </summary>
            <param name="value">Число</param>
            <param name="offset">Смещение</param>
            <returns></returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.GlobalBitFunctions.BitwiseShiftRight(System.UInt32,System.Int32)">
            <summary>
            Выполняет побитовый сдвиг числа вправо на заданное смещение
            </summary>
            <param name="value">Число</param>
            <param name="offset">Смещение</param>
            <returns></returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext">
            <summary>
            Объект доступа к протоколу HTTP/HTTPS.
            Использует семантику методов, реализованных в платформе 1С:Предприятие 8.2.18 и старше.
            Синтаксис методов, применявшийся в более младших версиях не поддерживается.
            Средства работы с HTTP находятся в статусе experimental.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext.Get(ScriptEngine.HostedScript.Library.Http.HttpRequestContext,System.String)">
            <summary>
            Получить данные методом GET
            </summary>
            <param name="request">HTTPЗапрос. Данные и заголовки запроса http</param>
            <param name="output">Строка. Имя файла, в который нужно записать ответ. Необязательный параметр.</param>
            <returns>HTTPОтвет. Ответ сервера.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext.Put(ScriptEngine.HostedScript.Library.Http.HttpRequestContext)">
            <summary>
            Передача данных методом PUT
            </summary>
            <param name="request">HTTPЗапрос. Данные и заголовки запроса http</param>
            <returns>HTTPОтвет. Ответ сервера.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext.Post(ScriptEngine.HostedScript.Library.Http.HttpRequestContext,System.String)">
            <summary>
            Передача данных методом POST
            </summary>
            <param name="request">HTTPЗапрос. Данные и заголовки запроса http</param>
            <param name="output">Строка. Имя файла, в который нужно записать ответ. Необязательный параметр.</param>
            <returns>HTTPОтвет. Ответ сервера.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext.Delete(ScriptEngine.HostedScript.Library.Http.HttpRequestContext)">
            <summary>
            Удалить данные методом DELETE
            </summary>
            <param name="request">HTTPЗапрос. Данные и заголовки запроса http</param>
            <returns>HTTPОтвет. Ответ сервера.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext.Patch(ScriptEngine.HostedScript.Library.Http.HttpRequestContext)">
            <summary>
            Изменяет данные на сервере при помощи PATCH-запроса
            </summary>
            <param name="request">HTTPЗапрос. Данные и заголовки запроса http</param>
            <returns>HTTPОтвет. Ответ сервера.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext.Head(ScriptEngine.HostedScript.Library.Http.HttpRequestContext)">
            <summary>
            Получает при помощи HEAD-запроса информацию о запрошиваемых данных, содержащуюся в заголовках, не получая сами данные.
            </summary>
            <param name="request">HTTPЗапрос. Данные и заголовки запроса http</param>
            <returns>HTTPОтвет. Ответ сервера.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext.Patch(System.String,ScriptEngine.HostedScript.Library.Http.HttpRequestContext,System.String)">
            <summary>
            Вызвать произвольный HTTP-метод
            </summary>
            <param name="method">Строка. Имя метода HTTP</param>
            <param name="request">HTTPЗапрос. Данные и заголовки запроса http</param>
            <param name="output">Строка. Имя выходного файла</param>
            <returns>HTTPОтвет. Ответ сервера.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpConnectionContext.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
            <summary>
            Стандартный конструктор. Поддержка клиентских сертификатов HTTPS в текущей версии не реализована.
            Для доступа к серверу по протоколу HTTPS указывайте схему https:// в URL.
            </summary>
            <param name="host">Адрес сервера (можно указать URL-схему http или https)</param>
            <param name="port">Порт сервера</param>
            <param name="user">Пользователь</param>
            <param name="password">Пароль</param>
            <param name="proxy">ИнтернетПрокси. Настройки прокси-сервера</param>
            <param name="timeout">Таймаут ожидания.</param>
            <param name="ssl">Объект ЗащищенноеСоединение. На данный момент данная механика работы с SSL не поддерживается. 
            Обращение к https возможно, если в адресе хоста указать протокол https. В этом случае будут использованы сертификаты из хранилища ОС.
            Указание произвольных клиентских и серверных сертификатов в текущей версии не поддерживается.</param>
            <param name="useOSAuthentication">Использовать аутентификацию ОС.</param>
            <returns></returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Http.HttpRequestContext">
            <summary>
            Данные и заголоки HTTP запроса.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Http.HttpRequestContext.ResourceAddress">
            <summary>
            Относительный путь к ресурсу на сервере (не включает имя сервера)
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Http.HttpRequestContext.Headers">
            <summary>
            Соответствие. Заголовки запроса к http-серверу
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpRequestContext.SetBodyFileName(System.String)">
            <summary>
            Установить файл на диске в качестве тела запроса. Файл открывается на чтение и остается открытым до завершения запроса.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpRequestContext.SetBodyFromBinary(ScriptEngine.HostedScript.Library.Binary.BinaryDataContext)">
            <summary>
            Установить тело запроса из объекта ДвоичныеДанные
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpRequestContext.SetBodyFromString(System.String,ScriptEngine.Machine.IValue,ScriptEngine.HostedScript.Library.ByteOrderMarkUsageEnum)">
            <summary>
            Установить строку в качестве содержимого запроса
            </summary>
            <param name="data">Строка с данными</param>
            <param name="encoding">КодировкаТекста или Строка. Кодировка в которой отправляются данные.</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Http.HttpResponseContext">
            <summary>
            Ответ от HTTP-сервера
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Http.HttpResponseContext.Headers">
            <summary>
            Соответствие. Заголовки ответа сервера.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Http.HttpResponseContext.StatusCode">
            <summary>
            Код состояния HTTP ответа. Число.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpResponseContext.GetBodyAsString(ScriptEngine.Machine.IValue)">
            <summary>
            Получает ответ сервера в виде строки
            </summary>
            <param name="encoding">КодировкаТекста или Строка. Кодировка полученного текста. По умолчанию принимается кодировка из заголовка Content-Type</param>
            <returns></returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpResponseContext.GetBodyAsBinaryData">
            <summary>
            Интерпретировать ответ, как ДвоичныеДанные
            </summary>
            <returns>ДвоичныеДанные</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpResponseContext.GetBodyAsStream">
            <summary>
            Интерпретировать ответ, как Поток
            </summary>
            <returns>Поток</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpResponseContext.GetBodyFileName">
            <summary>
            Получить файл, в который записан ответ сервера.
            </summary>
            <returns>Строка. Имя файла с ответом. Если ответ не записывался в файл - возвращает Неопределено.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Http.HttpResponseContext.Close">
            <summary>
            Закрыть HTTP ответ и освободить ресурсы
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Http.InternetProxyContext">
            <summary>
            Параметры прокси-сервера для доступа в Интернет.
            В текущей реализации поддерживается только HTTP прокси. Стандартные методы объекта ИнтернетПрокси из 1С:Предприятие для FTP и SOCKS не реализованы.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Json.JSONReader">
            <summary>
            
            Предназначен для последовательного чтения JSON-данных из файла или строки.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONReader.IsOpen">
            <summary>
            
            Возвращает true если для объекта чтения json был задан текст для парсинга.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONReader.CurrentPosition">
            <summary>
            
            Указывает на позицию, находящуюся сразу после прочитанного значения.
            При ошибке чтение остается на позиции последнего успешно считанного символа.
            </summary>
            <value>Число (Number), Неопределено (Undefined)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONReader.CurrentLine">
            <summary>
            
            Указывает на позицию сразу после прочитанного значения.
            Например, перед чтением первого элемента - 0, после чтения первого элемента -1 .
            </summary>
            <value>Число (Number), Неопределено (Undefined)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONReader.CurrentValue">
            <summary>
            
            Содержит текущее значение:
            
             - Число - если ТипТекущегоЗначения имеет значение Число;
             - Строка - если ТипТекущегоЗначения имеет значение:
            
             - Комментарий,
             - ИмяСвойства,
             - Строка;
             - Булево - если ТипТекущегоЗначения имеет значение Булево,
             - Неопределено - если ТипТекущегоЗначения имеет значение Null.
            Исключение генерируется в случае, если ТипТекущегоЗначения имеет одно из следующих значений:
            
             - НачалоМассива,
             - КонецМассива,
             - НачалоОбъекта,
             - КонецОбъекта,
             - Ничего.
            </summary>
            <value>Число (Number), Строка (String), Булево (Boolean), Неопределено (Undefined)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONReader.CurrentValueType">
            <summary>
            
            Тип текущего значения в документе JSON.
            Неопределено - если чтение еще не началось или достигнут конец файла.
            </summary>
            <value>ТипЗначенияJSON (JSONValueType)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONReader.Close">
             <summary>
             
             Завершает чтение текста JSON из файла или строки.
             </summary>
            
            
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONReader.OpenFile(System.String,ScriptEngine.Machine.IValue)">
             <summary>
             
             Открывает JSON-файл для чтения данным объектом. Если перед вызовом данного метода уже производилось чтение JSON из другого файла или строки, то чтение прекращается и объект инициализируется для чтения из указанного файла.
             </summary>
            
             <param name="JSONFileName">
             Имя файла, содержащего текст JSON. </param>
             <param name="encoding">
             Позволяет задать кодировку входного файла.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONReader.Skip">
             <summary>
             Если текущее значение – начало массива или объекта, то пропускает его содержимое и конец.
             Для остальных типов значений работает аналогично методу Прочитать().
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONReader.Read">
             <summary>
             Выполняет чтение значения JSON.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONReader.SetString(System.String)">
             <summary>
             
             Устанавливает строку, содержащую текст JSON для чтения данным объектом. Если перед вызовом данного метода уже производилось чтение JSON из другого файла или строки, то чтение прекращается и объект инициализируется для чтения из указанной строки.
             </summary>
            
             <param name="JSONString">
             Строка, содержащая текст в формате JSON. </param>
            
            
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Json.JSONWriter">
            <summary>
            
            Предназначен для организации последовательной записи объектов и текстов JSON.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.IsOpen">
            <summary>
            
            Возвращает true если для объекта чтения json был задан текст для парсинга.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.IsOpenForString">
            <summary>
            
            Возвращает true если для объекта чтения json был задан текст для парсинга.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriter.Settings">
            <summary>
            
            Определяет текущие параметры записи JSON.
            </summary>
            <value>ПараметрыЗаписиJSON (JSONWriterSettings)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriter.ValidateStructure">
            <summary>
            
            Показывает, будет ли проводиться проверка правильности структуры записываемого JSON объекта. В случае обнаружение ошибки, будет сгенерировано исключение. Например: при попытке записать значение без имени вне массива или записать окончание объекта без начала. Установка данного свойства не имеет немедленного эффекта. Установленное значение свойства будет использовано только после открытия файла или установки строки.
            После создания объекта данное свойство имеет значение Истина.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.Close">
             <summary>
             
             Завершает запись текста JSON. Если производилась запись в файл, то файл закрывается. Если производилась запись в строку, то результирующая строка будет получена в качестве возвращаемого значения метода. Если производилась запись в файл, то метод вернет пустую строку.
             </summary>
            
             <returns name="String">
             Значения данного типа содержат строку в формате Unicode произвольной длины.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.WriteRaw(System.String)">
             <summary>
             
             Выполняет запись произвольной строки в документ, при этом проверка структуры документа не выполняется.
             Если при использовании метода свойство ПроверятьСтруктуру установлено в значение Истина, то проверка структуры продолжается на следующем элементе.
             </summary>
            
             <param name="stringValue">
             Строка, записываемая в документ JSON. </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.WriteValue(ScriptEngine.Machine.IValue,System.Boolean)">
             <summary>
             
             Записывает значение свойства JSON.
             </summary>
            
             <param name="value">
             Записываемое значение. Типы: Строка (String), Число (Number), Булево (Boolean), Неопределено (Undefined) </param>
             <param name="useFormatWithExponent">
             Использование экспоненциальной формы записи для числовых значений. Параметр имеет смысл только если записывается значение числового типа.
             Значение по умолчанию: Ложь. </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.WritePropertyName(System.String)">
             <summary>
             
             Записывает имя свойства JSON.
             </summary>
            
             <param name="propertyName">
             Имя свойства. </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.WriteEndArray">
             <summary>
             
             Записывает конец массива JSON.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.WriteEndObject">
             <summary>
             
             Записывает конец объекта JSON.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.WriteStartArray">
             <summary>
             
             Записывает начало массива JSON.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.WriteStartObject">
             <summary>
             
             Записывает начало объекта JSON.
             </summary>
            
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.OpenFile(System.String,System.String,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
             <summary>
             
             Открывает файл для записи JSON. Позволяет указать тип кодировки, который будет использован для записи файла JSON, а также использование BOM.
             </summary>
            
             <param name="fileName">
             Имя файла, в который будет записываться текст JSON. </param>
             <param name="encoding">
             В качестве типа кодировки может быть указана одна из возможных кодировок текста. В этом случае файл будет записан в соответствующей кодировке. Если же в качестве параметра указана пустая строка или ничего не указано, то для записи файла будет использована кодировка UTF8.
             Поддерживаемые коды кодировок:
             
             Значение по умолчанию: UTF-8. </param>
             <param name="addBOM">
             Определяет, будет ли добавлен маркер порядка байт (BOM) к результирующему файлу JSON.
             Внимание. Стандарт RFC7159 настоятельно рекомендует не добавлять маркер порядка байт (BOM) к документу JSON .
             Значение по умолчанию: Ложь. </param>
             <param name="settings">
             Параметры, используемые при открытии файла для настройки записи в формате JSON. </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriter.SetString(ScriptEngine.Machine.IValue)">
             <summary>
             
             Инициализирует объект для вывода результирующего JSON текста в строку.
             </summary>
            
             <param name="settings">
             Параметры, используемые при записи объекта JSON.
             По умолчанию, содержит ПараметрыЗаписиJSON, сгенерированные автоматически. </param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings">
            <summary>
            
            Определяет набор параметров, используемых при записи JSON.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
             <summary>
             
             Создает объект параметров записи JSON.
             </summary>
            
             <param name="newLines">
             Определяет способ переноса строк, который будет использован при записи данных JSON.
             Значение по умолчанию: Авто. </param>
             <param name="paddingSymbols">
             Определяет символы отступа, используемые при записи данных JSON.
             Применяется только, если значение ПереносСтрокJSON отлично от Нет.
             Значение по умолчанию: " ". </param>
             <param name="useDoubleQuotes">
             Определяет, будут ли при записи имена свойств JSON записываться в двойных кавычках.
             Значение по умолчанию: Истина. </param>
             <param name="escapeCharacters">
             Определяет используемый способ экранирования (замены) символов при записи данных JSON.
             Значение по умолчанию: Нет. </param>
             <param name="escapeAngleBrackets">
             Определяет, будут ли при записи экранироваться символы '&lt;' и '&gt;'.
             Значение по умолчанию: Ложь. </param>
             <param name="escapeLineTerminators">
             Определяет, будут ли экранироваться разделители строк - U+2028 (line-separator) и U+2029 (page-separator).
             Значение по умолчанию: Истина. </param>
             <param name="escapeAmpersand">
             Определяет, будет ли при записи экранироваться символ амперсанда '&amp;'.
             Значение по умолчанию: Ложь. </param>
             <param name="escapeSingleQuotes">
             Определяет, будут ли экранироваться одинарные кавычки.
             Устанавливается в значение Истина, если ИспользоватьДвойныеКавычки установлено в Ложь.
             Значение по умолчанию: Ложь. </param>
             <param name="escapeSlash">
             Определяет, будет ли экранироваться слеш (косая черта) при записи значения.
             Значение по умолчанию: Ложь. </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.Constructor">
             <summary>
             
             
             </summary>
            
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.UseDoubleQuotes">
            <summary>
            
            Определяет использование двойных кавычек при записи свойств и значений JSON.
            После создания объекта данное свойство имеет значение Истина.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.NewLines">
            <summary>
            
            Управляет размещением начала и конца объектов и массивов, ключей и значений на новой строке.
            Также установка данного свойства в значение, отличное от Нет, добавляет пробел между именем свойства, двоеточием и значением.
            После создания объекта данное свойство имеет значение Авто.
            </summary>
            <value>ПереносСтрокJSON (JSONLineBreak)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.PaddingSymbols">
            <summary>
            
            Определяет символы отступа, используемые при записи документа JSON.
            Свойство не используется, если свойство ПереносСтрокJSON установлено в значение Нет.
            После создания объекта данное свойство имеет значение - один пробельный символ.
            </summary>
            <value>Строка (String)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.EscapeCharacters">
            <summary>
            
            Определяет способ экранирования символов при записи документа JSON.
            После создания объекта данное свойство имеет значение СимволыВнеASCII.
            </summary>
            <value>ЭкранированиеСимволовJSON (JSONCharactersEscapeMode)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.EscapeAmpersand">
            <summary>
            
            Определяет, будет ли экранироваться знак амперсанда при записи документа JSON.
            После создания объекта данное свойство имеет значение Ложь.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.EscapeSingleQuotes">
            <summary>
            
            Определяет, будет ли экранирован знак одинарной кавычки при записи документа JSON.
            Имеет значение Истина, если ИспользоватьДвойныеКавычки установлен Ложь.
            После создания объекта данное свойство имеет значение Ложь
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.EscapeLineTerminators">
            <summary>
            
            Определяет экранирование символов "U+2028" (разделитель строк) и "U+2029" (разделитель абзацев) для совместимости с JavaScript.
            После создания объекта данное свойство имеет значение Истина.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.EscapeSlash">
            <summary>
            
            Определяет, будет ли экранироваться слеш (косая черта) при записи значения.
            После создания объекта данное свойство имеет значение Ложь.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Json.JSONWriterSettings.EscapeAngleBrackets">
            <summary>
            
            Определяет, будут ли экранированы знаки угловых скобок при записи документа JSON.
            После создания объекта данное свойство имеет значение Ложь.
            </summary>
            <value>Булево (Boolean)</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.MiscGlobalFunctions.EncodeString(System.String,ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.StringEncodingMethodEnum},ScriptEngine.Machine.IValue)">
            <summary>
            Кодирует строку для передачи в URL (urlencode)
            </summary>
            <param name="sourceString"></param>
            <param name="codeType"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.MiscGlobalFunctions.DecodeString(System.String,ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.StringEncodingMethodEnum},ScriptEngine.Machine.IValue)">
            <summary>
            Раскодирует строку из URL формата.
            </summary>
            <param name="encodedString"></param>
            <param name="codeType"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Net.TCPClient">
            <summary>
            Соединение по протоколу TCP. Позволяет отправлять и принимать данные с использованием TCP сокета.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPClient.ReadString(System.String)">
            <summary>
            Прочитать данные из сокета в виде строки.
            </summary>
            <param name="encoding">КодировкаТекста или Строка. Указывает в какой кодировке интерпретировать входящий поток байт.
            Значение по умолчанию: utf-8</param>
            <returns>Строка. Данные прочитанные из сокета</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPClient.ReadBinaryData(System.Int32)">
            <summary>
            Читает сырые байты из сокета.
            </summary>
            <param name="len">Количество байт, которые требуется прочитать. 0 - читать до конца потока.
            Значение по умолчанию: 0</param>
            <returns>ДвоичныеДанные</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPClient.SendString(System.String,System.String)">
            <summary>
            Отправка строки на удаленный хост
            </summary>
            <param name="data">Строка. Данные для отправки</param>
            <param name="encoding">КодировкаТекста или Строка. Кодировка в которой нужно записать данные в поток. По умолчанию utf-8</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPClient.SendString(ScriptEngine.HostedScript.Library.Binary.BinaryDataContext)">
            <summary>
            Отправка сырых двоичных данных на удаленный хост.
            </summary>
            <param name="data">ДвоичныеДанные которые нужно отправить.</param>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Net.TCPClient.IsActive">
            <summary>
            Признак активности соединения.
            Данный признак не является надежным признаком существования соединения. 
            Он говорит лишь о том, что на момент получения значения данного свойства соединение было активно.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Net.TCPClient.WriteTimeout">
            <summary>
            Таймаут, в течение которого система ожидает отправки данных. Если таймаут не установлен, то скрипт будет ждать начала отправки бесконечно.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Net.TCPClient.ReadTimeout">
            <summary>
            Таймаут чтения данных. Если таймаут не установлен, то скрипт будет ждать начала приема данных бесконечно.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPClient.Close">
            <summary>
            Закрывает соединение с удаленным хостом.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPClient.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
            <summary>
            Подключение к удаленному TCP-сокету
            </summary>
            <param name="host">адрес машины</param>
            <param name="port">порт сокета</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Net.TCPServer">
            <summary>
            Простой однопоточный tcp-сокет. Слушает входящие соединения на определенном порту
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPServer.Start">
            <summary>
            Метод инициализирует TCP-сервер и подготавливает к приему входящих соединений
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPServer.Stop">
            <summary>
            Останавливает прослушивание порта.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPServer.WaitForConnection(System.Int32)">
            <summary>
            Приостановить выполнение скрипта и ожидать соединений по сети.
            После получения соединения выполнение продолжается
            </summary>
            <param name="timeout">Значение таймаута в миллисекундах.</param>
            <returns>TCPСоединение. Объект, позволяющий обмениваться данными с удаленным хостом.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Net.TCPServer.ConstructByPort(ScriptEngine.Machine.IValue)">
            <summary>
            Создает новый сокет с привязкой к порту.
            </summary>
            <param name="port">Порт, который требуется слушать.</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ProcessContext">
            <summary>
            Позволяет управлять процессом операционной системы. Получать текст из стандартных потоков,
            проверять активность, pid, завершать процесс и т.п.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ProcessContext.OutputEncoding">
            <summary>
            Устанавливает кодировку в которой будут считываться стандартные потоки вывода и ошибок.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ProcessContext.StdOut">
            <summary>
            ПотокВыводаТекста. Стандартный поток вывода (stdout)
                в методе "Завершен" смотрите пример правильной обработки цикла ожидания завершения процесса:
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ProcessContext.StdErr">
            <summary>
            ПотокВыводаТекста. Стандартный поток вывода ошибок (stderr)
                в методе "Завершен" смотрите пример правильной обработки цикла ожидания завершения процесса:
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ProcessContext.StdIn">
            <summary>
            ПотокВводаТекста. Стандартный поток ввода (stdin)
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ProcessContext.Start">
            <summary>
            Запустить процесс на выполнение.
                в методе "Завершен" смотрите пример правильной обработки цикла ожидания завершения процесса:
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ProcessContext.HasExited">
             <summary>
             Флаг указывает, что процесс завершен (или нет)
             </summary>
            
             <example>
             // Пример правильной обработки цикла ожидания завершения процесса:
             // Процесс не завершается, пока любой из потоков (stdout, stderr) открыт для чтения.
             // Процесс висит и ждет, пока его освободят от текста в обоих потоках.
            
             Пока НЕ Процесс.Завершен ИЛИ Процесс.ПотокВывода.ЕстьДанные ИЛИ Процесс.ПотокОшибок.ЕстьДанные Цикл
                 Если ПериодОпросаВМиллисекундах &lt;&gt; 0 Тогда
                     Приостановить(ПериодОпросаВМиллисекундах);
                 КонецЕсли;
             
                 ОчереднаяСтрокаВывода = Процесс.ПотокВывода.Прочитать();
                 ОчереднаяСтрокаОшибок = Процесс.ПотокОшибок.Прочитать();
                 Если Не ПустаяСтрока(ОчереднаяСтрокаВывода) Тогда
                     Сообщить(ОчереднаяСтрокаВывода, СтатусСообщения.Информация);
                 КонецЕсли;
             
                 Если Не ПустаяСтрока(ОчереднаяСтрокаОшибок) Тогда
                     Сообщить(ОчереднаяСтрокаОшибок, СтатусСообщения.Важное);
                 КонецЕсли;
             КонецЦикла;        
             </example>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ProcessContext.ExitCode">
            <summary>
            Код возврата завершенного процесса.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ProcessContext.WaitForExit(ScriptEngine.Machine.IValue)">
            <summary>
            Приостановить выполнение скрипта и ожидать завершения процесса.
            </summary>
            <param name="timeout">Число. Таймаут в миллисекундах.</param>
            <returns>Булево. Ложь, если таймаут истек.</returns>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ProcessContext.ProcessId">
            <summary>
            PID процесса
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.RandomNumberGenerator.Constructor(ScriptEngine.Machine.IValue)">
            <summary>
            Формирует ГСЧ с возможностью указания начального числа.
            </summary>
            <param name="seed">Начальное число. Последовательность случайных чисел для одного и того же начального числа будет одинакова</param>
            <returns></returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ReflectorContext">
            <summary>
            Рефлектор предназначен для получения метаданных объектов во время выполнения.
            Как правило, рефлексия используется для проверки наличия у объекта определенных свойств/методов.
            В OneScript рефлексию можно применять для вызова методов объектов по именам методов.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ReflectorContext.CallMethod(ScriptEngine.Machine.IRuntimeContextInstance,System.String,ScriptEngine.HostedScript.Library.ArrayImpl)">
            <summary>
            Вызывает метод по его имени.
            </summary>
            <param name="target">Объект, метод которого нужно вызвать.</param>
            <param name="methodName">Имя метода для вызова</param>
            <param name="arguments">Массив аргументов, передаваемых методу. Следует учесть, что все параметры нужно передавать явно, в том числе необязательные.</param>
            <returns>Если вызывается функция, то возвращается ее результат. В противном случае возвращается Неопределено.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ReflectorContext.MethodExists(ScriptEngine.Machine.IValue,System.String)">
            <summary>
            Проверяет существование указанного метода у переданного объекта..
            </summary>
            <param name="target">Объект, из которого получаем таблицу методов.</param>
            <param name="methodName">Имя метода для вызова</param>
            <returns>Истину, если метод существует, и Ложь в обратном случае. </returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ReflectorContext.GetMethodsTable(ScriptEngine.Machine.IValue)">
            <summary>
            Получает таблицу методов для переданного объекта..
            </summary>
            <param name="target">Объект, из которого получаем таблицу методов.</param>
            <returns>Таблица значений колонками: Имя, Количество, ЭтоФункция, Аннотации</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ReflectorContext.GetPropertiesTable(ScriptEngine.Machine.IValue)">
            <summary>
            Получает таблицу свойств для переданного объекта..
            </summary>
            <param name="target">Объект, из которого получаем таблицу свойств.</param>
            <returns>Таблица значений с колонками - Имя, Аннотации</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Regex.MatchCollection.Count">
            <summary>
            Получает количество полученных совпадений.
            </summary>
            <returns>Количество полученных совпадений.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Regex.GroupCollection.Count">
            <summary>
            Получает количество полученных групп.
            </summary>
            <returns>Количество полученных групп.</returns>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.MatchImpl.Value">
            <summary>
            Найденная строка.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.MatchImpl.Index">
            <summary>
            Индекс найденной строки. Нумерация начинается с 0
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.MatchImpl.Length">
            <summary>
            Длина найденной строки.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.MatchImpl.Groups">
            <summary>
            Коллекция найденных групп (тип КоллекцияГруппРегулярногоВыражения).
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.GroupImpl.Value">
            <summary>
            Найденная строка.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.GroupImpl.Index">
            <summary>
            Индекс найденной строки. Нумерация начинается с 0
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.GroupImpl.Length">
            <summary>
            Длина найденной строки.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Regex.RegExpImpl.IsMatch(System.String,System.Int32)">
            <summary>
            Проверяет, что строка совпадает с шаблоном регулярного выражения.
            </summary>
            <param name="inputString">Строка, которая проверяется.</param>
            <param name="startAt">Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0</param>
            <returns>Признак совпадения. Булево.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Regex.RegExpImpl.Matches(System.String,System.Int32)">
            <summary>
            Находит все совпадения в строке по шаблону регулярного выражения.
            </summary>
            <param name="inputString">Строка, которая проверяется.</param>
            <param name="startAt">Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0</param>
            <returns>Коллекция совпадения (тип КоллекцияСовпаденийРегулярногоВыражения).</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Regex.RegExpImpl.Split(System.String,System.Int32,System.Int32)">
            <summary>
            Разделяет исходную строку на части, используя как разделитель заданное регулярное выражение.
            </summary>
            <param name="inputString">Строка, которая проверяется.</param>
            <param name="count">Число. Необязательный параметр. По-умолчанию 0 (искать все). Содержит количество искомых элементов.</param>
            <param name="startAt">Число. Необязательный параметр. По-умолчанию 0. Содержит стартовую позицию, начиная с которой надо анализировать текст. Нумерация позиций в отличии от 1С начинается с 0</param>
            <returns>Массив полученных строк.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Regex.RegExpImpl.Replace(System.String,System.String)">
            <summary>
            Заменяет в исходной строке все вхождения регулярного выражения на СтрокаЗамены.
            В строке замены можно использовать ссылки на захваченные группы, как $n, где n - номер захваченной группы ($0 - все захваченное выражение).
            </summary>
            <param name="inputString">Строка. Текст, в котором необходимо выполнить замены.</param>
            <param name="replacement">Строка. Текст, который будет вставляться в места замены.</param>
            <returns>Строку-результат замены.</returns>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.RegExpImpl.IgnoreCase">
            <summary>
            Признак Не учитывать регистр символов. Булево
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Regex.RegExpImpl.Multiline">
            <summary>
            Признак выполнения многострочного поиска. Булево
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Regex.RegExpImpl.Constructor(ScriptEngine.Machine.IValue)">
            <summary>
            Конструктор создания регулярного выражения по заданному шаблону.
            </summary>
            <param name="pattern">Строка-шаблон регулярного выражения.</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.SpecialFolderEnum">
            <summary>
            Системное перечисление для специальных папок.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.StdTextReadStream">
            <summary>
            Стандартный поток вывода текста.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.StdTextReadStream.HasData">
            <summary>
            Признак показывает, что в потоке есть данные.
            </summary>
            <example>
            Пока Поток.ЕстьДанные Цикл
                Сообщить(Поток.ПрочитатьСтроку());
            КонецЦикла;
            </example>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StdTextReadStream.Read">
            <summary>
            Прочитать все данные из потока.
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StdTextReadStream.ReadLine">
            <summary>
            Прочитать одну строку из потока.
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StdTextReadStream.Close">
            <summary>
            Закрыть поток.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.StdTextWriteStream">
            <summary>
            Стандартный поток ввода текста. Используется для взаимодействия с работающими процессами.
            Методы работают подобно одноименным методам объекта ЗаписьТекста.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StringOperations.NStr(System.String,System.String)">
            <summary>
            Функция НСтр имеет ограниченную поддержку и может использоваться только для упрощения портирования кода из 1С.
            Возвращает только строку на первом языке из списка, если второй параметр не указан. (Игнорирует "язык по-умолчанию")
            </summary>
            <param name="src">Строка на нескольких языках</param>
            <param name="lang">Код языка (если не указан, возвращается первый возможный вариант)</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StringOperations.StrStartsWith(System.String,System.String)">
            <summary>
            Определяет, что строка начинается с указанной подстроки.
            </summary>
            <param name="inputString">Строка, начало которой проверяется на совпадение с подстрокой поиска.</param>
            <param name="searchString">Строка, содержащая предполагаемое начало строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StringOperations.StrEndsWith(System.String,System.String)">
            <summary>
            Определяет, заканчивается ли строка указанной подстрокой.
            </summary>
            <param name="inputString">Строка, окончание которой проверяется на совпадение с подстрокой поиска.</param>
            <param name="searchString">Строка, содержащая предполагаемое окончание строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StringOperations.StrSplit(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Разделяет строку на части по указанным символам-разделителям.
            </summary>
            <param name="inputString">Разделяемая строка.</param>
            <param name="stringDelimiter">Строка символов, каждый из которых является индивидуальным разделителем.</param>
            <param name="includeEmpty">Указывает необходимость включать в результат пустые строки, которые могут образоваться в результате разделения исходной строки. Значение по умолчанию: Истина. </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StringOperations.StrConcat(ScriptEngine.HostedScript.Library.ArrayImpl,System.String)">
            <summary>
            Соединяет массив переданных строк в одну строку с указанным разделителем
            </summary>
            <param name="input">Массив - соединяемые строки</param>
            <param name="delimiter">Разделитель. Если не указан, строки объединяются слитно</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StringOperations.StrCompare(System.String,System.String)">
            <summary>
            Сравнивает строки без учета регистра.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns>-1 первая строка больше, 1 - вторая строка больше. 0 - строки равны</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StringOperations.StrFind(System.String,System.String,ScriptEngine.HostedScript.Library.SearchDirection,System.Int32,System.Int32)">
            <summary>
            Находит вхождение искомой строки как подстроки в исходной строке
            </summary>
            <param name="haystack">Строка, в которой ищем</param>
            <param name="needle">Строка, которую надо найти</param>
            <param name="direction">значение перечисления НаправлениеПоиска (с конца/с начала)</param>
            <param name="startPos">Начальная позиция, с которой начинать поиск</param>
            <param name="occurance">Указывает номер вхождения искомой подстроки в исходной строке</param>
            <returns>Позицию искомой строки в исходной строке. Возвращает 0, если подстрока не найдена.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.StructureImpl.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue[])">
            <summary>
            Создает структуру по заданному перечню свойств и значений
            </summary>
            <param name="strProperties">Строка с именами свойств, указанными через запятую.</param>
            <param name="args">Значения свойств. Каждое значение передается, как отдельный параметр.</param>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SymbolsContext.LF">
            <summary>
            Символ перевода строки.
            </summary>
            <value>Символ перевода строки.</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SymbolsContext.CR">
            <summary>
            Символ возврата каретки.
            </summary>
            <value>Символ возврата каретки.</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SymbolsContext.VTab">
            <summary>
            Символ вертикальной табуляции.
            </summary>
            <value>Символ вертикальной табуляции.</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SymbolsContext.Tab">
            <summary>
            Символ табуляции.
            </summary>
            <value>Символ горизонтальной табуляции.</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SymbolsContext.FF">
            <summary>
            Символ промотки.
            </summary>
            <value>Символ промотки.</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SymbolsContext.Nbsp">
            <summary>
            Символ неразрывного пробела.
            </summary>
            <value>Символ неразрывного пробела.</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemConfigAccessor.Refresh">
            <summary>
            Метод обновляет текущие настройки значениями из файла oscript.cfg
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemConfigAccessor.GetSystemOptionValue(System.String)">
            <summary>
            Метод возвращает значение из файла oscript.cfg по имени настойки
            </summary>
            <param name="optionKey">Имя настройки из файла oscript.cfg</param>
            <returns>Строка. Значение системной настройки.</returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.SystemEnvironmentContext">
            <summary>
            Класс предоставляет информацию о системе
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.MachineName">
            <summary>
            Имя машины, на которой выполняется сценарий
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.OSVersion">
            <summary>
            Версия операционной системы, на которой выполняется сценарий
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.Version">
            <summary>
            Версия OneScript, выполняющая данный сценарий
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.OSUser">
            <summary>
            Имя пользователя ОС с учетом домена
            Формат строки: \\ИмяДомена\ИмяПользователя. 
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.Is64BitOperatingSystem">
            <summary>
            Определяет, является ли текущая операционная система 64-разрядной.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.ProcessorCount">
            <summary>
            Возвращает число процессоров.
            32-битовое целое число со знаком, которое возвращает количество процессоров на текущем компьютере. 
            Значение по умолчанию отсутствует. Если текущий компьютер содержит несколько групп процессоров, 
            данное свойство возвращает число логических процессоров, доступных для использования средой CLR
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.SystemPageSize">
            <summary>
            Возвращает количество байтов на странице памяти операционной системы
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.TickCount">
            <summary>
            Возвращает время, истекшее с момента загрузки системы (в миллисекундах).
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.GetFolderPath(ScriptEngine.Machine.IValue)">
            <summary>
            Возвращает путь для специальной папки. Поддерживаемые значения:
            
            * МоиДокументы / MyDocuments            
            * ДанныеПриложений / ApplicationData
            * ЛокальныйКаталогДанныхПриложений / LocalApplicationData            
            * РабочийСтол / Desktop
            * КаталогРабочийСтол / DesktopDirectory
            * МояМузыка / MyMusic
            * МоиРисунки / MyPictures
            * Шаблоны / Templates
            * МоиВидеозаписи / MyVideos
            * ОбщиеШаблоны / CommonTemplates
            * ПрофильПользователя / UserProfile
            * ОбщийКаталогДанныхПриложения / CommonApplicationData
            </summary>
            <param name="folder">Тип: СпециальнаяПапка</param>
            <returns>Строка</returns>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.GetLogicalDrives">
            <summary>
            Возвращает массив строк, содержащий имена логических дисков текущего компьютера.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.EnvironmentVariables">
            <summary>
            Возвращает соответствие переменных среды. Ключом является имя переменной, а значением - значение переменной
            </summary>
            <example>
            СИ = Новый СистемнаяИнформация();
            Для Каждого Переменная Из СИ.ПеременныеСреды() Цикл
                Сообщить(Переменная.Ключ + " = " + Переменная.Значение);
            КонецЦикла;
            </example>
            <returns>Соответствие</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.SetEnvironmentVariable(System.String,System.String)">
            <summary>
            Позволяет установить переменную среды. 
            Переменная устанавливается в области видимости процесса и очищается после его завершения.
            </summary>
            <param name="varName">Имя переменной</param>
            <param name="value">Значение переменной</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemEnvironmentContext.GetEnvironmentVariable(System.String)">
            <summary>
            Получить значение переменной среды.
            </summary>
            <param name="varName">Имя переменной</param>
            <returns>Строка. Значение переменной</returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.SystemGlobalContext">
            <summary>
            Глобальный контекст. Представляет глобально доступные свойства и методы.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemGlobalContext.FileStreams">
            <summary>
            Менеджер файловых потоков.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.Echo(System.String,ScriptEngine.HostedScript.Library.MessageStatusEnum)">
            <summary>
            Выдает сообщение в консоль.
            </summary>
            <param name="message">Выдаваемое сообщение.</param>
            <param name="status">Статус сообщения. В зависимости от статуса изменяется цвет вывода сообщения.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.AttachScript(System.String,System.String)">
            <summary>
            Подключает сторонний файл сценария к текущей системе типов.
            Подключенный сценарий выступает, как самостоятельный класс, создаваемый оператором Новый
            </summary>
            <param name="path">Путь к подключаемому сценарию</param>
            <param name="typeName">Имя типа, которое будет иметь новый класс. Экземпляры класса создаются оператором Новый. </param>
            <example>ПодключитьСценарий("C:\file.os", "МойОбъект");
            А = Новый МойОбъект();</example>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.LoadScriptFromString(System.String,ScriptEngine.HostedScript.Library.StructureImpl)">
            <summary>
            Создает экземпляр объекта на основании стороннего файла сценария.
            Загруженный сценарий возвращается, как самостоятельный объект. 
            Экспортные свойства и методы скрипта доступны для вызова.
            </summary>
            <param name="code">Текст сценария</param>
            <param name="externalContext">Структура. Глобальные свойства, которые будут инжектированы в область видимости загружаемого скрипта. (Необязательный)</param>
            <example>
            Контекст = Новый Структура("ЧислоПи", 3.1415); // 4 знака хватит всем
            ЗагрузитьСценарийИзСтроки("Сообщить(ЧислоПи);", Контекст);</example>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.LoadScript(System.String,ScriptEngine.HostedScript.Library.StructureImpl)">
            <summary>
            Создает экземпляр объекта на основании стороннего файла сценария.
            Загруженный сценарий возвращается, как самостоятельный объект. 
            Экспортные свойства и методы скрипта доступны для вызова.
            </summary>
            <param name="path">Путь к подключаемому сценарию</param>
            <param name="externalContext">Структура. Глобальные свойства, которые будут инжектированы в область видимости загружаемого скрипта. (Необязательный)</param>
            <example>
            Контекст = Новый Структура("ЧислоПи", 3.1415); // 4 знака хватит
            // В коде скрипта somescript.os будет доступна глобальная переменная "ЧислоПи"
            Объект = ЗагрузитьСценарий("somescript.os", Контекст);</example>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.AttachAddIn(System.String)">
            <summary>
            Подключает внешнюю сборку среды .NET (*.dll) и регистрирует классы 1Script, объявленные в этой сборке.
            Публичные классы, отмеченные в dll атрибутом ContextClass, будут импортированы аналогично встроенным классам 1Script.
            Загружаемая сборка должна ссылаться на сборку ScriptEngine.dll
            </summary>
            <example>
            ПодключитьВнешнююКомпоненту("C:\MyAssembly.dll");
            КлассИзКомпоненты = Новый КлассИзКомпоненты(); // тип объявлен внутри компоненты
            </example>
            <param name="dllPath">Путь к внешней компоненте</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.StartupScript">
            <summary>
            Возвращает информацию о сценарии, который был точкой входа в программу.
            Можно выделить два вида сценариев: те, которые были подключены, как классы и те, которые запущены непосредственно. Метод СтартовыйСценарий возвращает информацию о сценарии, запущенном непосредственно.
            Для получения информации о текущем выполняемом сценарии см. метод ТекущийСценарий()
            </summary>
            <returns>Объект ИнформацияОСценарии</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.Sleep(System.Int32)">
            <summary>
            Приостанавливает выполнение скрипта.
            </summary>
            <param name="delay">Время приостановки в миллисекундах</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.Quit(System.Int32)">
            <summary>
            Прерывает выполнение текущего скрипта.
            </summary>
            <param name="exitCode">Код возврата (ошибки), возвращаемый операционной системе.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.InputString(ScriptEngine.Machine.IVariable,System.Int32)">
            <summary>
            Ввод строки пользователем. Позволяет запросить у пользователя информацию.
            </summary>
            <param name="resut">Выходной параметр. Введенные данные в виде строки.</param>
            <param name="len">Максимальная длина вводимой строки. 
            Возможно указание неограниченной длины (длина=ноль), но данное поведение может не поддерживаться хост-приложением.</param>
            <returns>Булево. Истина, если пользователь ввел данные, Ложь, если отказался.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.DisposeObject(ScriptEngine.Machine.IRuntimeContextInstance)">
            <summary>
            Явное освобождение ресурса через интерфейс IDisposable среды CLR.
            
            OneScript не выполняет подсчет ссылок на объекты, а полагается на сборщик мусора CLR.
            Это значит, что объекты автоматически не освобождаются при выходе из области видимости. 
            
            Метод ОсвободитьОбъект можно использовать для детерминированного освобождения ресурсов. Если объект поддерживает интерфейс IDisposable, то данный метод вызовет Dispose у данного объекта.
            
            Как правило, интерфейс IDisposable реализуется различными ресурсами (файлами, соединениями с ИБ и т.п.)
            </summary>
            <param name="obj">Объект, ресурсы которого требуется освободить.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.RunGarbageCollection">
            <summary>
            OneScript не выполняет подсчет ссылок на объекты, а полагается на сборщик мусора CLR.
            Это значит, что объекты автоматически не освобождаются при выходе из области видимости.
            
            С помощью данного метода можно запустить принудительную сборку мусора среды CLR.
            Данные метод следует использовать обдуманно, поскольку вызов данного метода не гарантирует освобождение всех объектов.
            Локальные переменные, например, до завершения текущего метода очищены не будут,
            поскольку до завершения текущего метода CLR будет видеть, что они используются движком 1Script.
            
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemGlobalContext.CommandLineArguments">
            <summary>
            Доступ к аргументам командной строки.
            Объект АргументыКоманднойСтроки представляет собой массив в режиме "только чтение".
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.SystemGlobalContext.Chars">
            <summary>
            Содержит набор системных символов.
            </summary>
            <value>Набор системных символов.</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.RunApp(System.String,System.String,System.Boolean,ScriptEngine.Machine.IVariable)">
            <summary>
            Запуск приложения в операционной системе
            </summary>
            <param name="cmdLine">Командная строка запуска</param>
            <param name="currentDir">Текущая директория запускаемого процесса (необязательно)</param>
            <param name="wait">Ожидать завершения (необязательно) по умолчанию Ложь</param>
            <param name="retCode">Выходной параметр. Код возврата процесса. Имеет смысл только если указан параметр wait=true</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.CreateProcess(System.String,System.String,System.Boolean,System.Boolean,ScriptEngine.Machine.IValue,ScriptEngine.HostedScript.Library.MapImpl)">
            <summary>
            Создает процесс, которым можно манипулировать из скрипта
            </summary>
            <param name="cmdLine">Командная строка запуска</param>
            <param name="currentDir">Текущая директория запускаемого процесса (необязательно)</param>
            <param name="redirectOutput">Перехватывать стандартные потоки stdout и stderr</param>
            <param name="redirectInput">Перехватывать стандартный поток stdin</param>
            <param name="encoding">Кодировка стандартных потоков вывода и ошибок</param>
            <param name="env">Соответствие, где установлены значения переменных среды</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.FindProcessById(System.Int32)">
            <summary>
            Выполняет поиск процесса по PID среди запущенных в операционной системе
            </summary>
            <param name="PID">Идентификатор процесса</param>
            <returns>Процесс. Если не найден - Неопределено</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.FindProcessesByName(System.String)">
            <summary>
            Выполняет поиск процессов с определенным именем
            </summary>
            <param name="name">Имя процесса</param>
            <returns>Массив объектов Процесс.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.ProgramDirectory">
            <summary>
            Каталог исполняемых файлов OneScript
            </summary>
            <returns></returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.CurrentDate">
            <summary>
            Текущая дата машины
            </summary>
            <returns>Дата</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.ValueIsFilled(ScriptEngine.Machine.IValue)">
            <summary>
            Проверяет заполненность значения по принципу, заложенному в 1С:Предприятии
            </summary>
            <param name="inValue"></param>
            <returns></returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.FillPropertyValues(ScriptEngine.Machine.IRuntimeContextInstance,ScriptEngine.Machine.IRuntimeContextInstance,System.String,System.String)">
            <summary>
            Заполняет одноименные значения свойств одного объекта из другого
            </summary>
            <param name="acceptor">Объект-приемник</param>
            <param name="source">Объект-источник</param>
            <param name="filledProperties">Заполняемые свойства (строка, через запятую)</param>
            <param name="ignoredProperties">Игнорируемые свойства (строка, через запятую)</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.GetCOMObject(System.String,System.String)">
            <summary>
            Получает объект класса COM по его имени или пути. Подробнее см. синтакс-помощник от 1С.
            </summary>
            <param name="pathName">Путь к библиотеке</param>
            <param name="className">Имя класса</param>
            <returns>COMОбъект</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.SystemGlobalContext.GetCOMObjectInternal(System.String,System.String)">
            <summary>
            Ported from Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            By JetBrains dotPeek decompiler
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.TextDocumentContext.Output">
            <summary>
            В 1С:Предприятие определяет возможность печати документа.
            В 1Script свойство не используется и его значение игнорируется
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.TextDocumentContext.UsedFileName">
            <summary>
            Содержит полное имя файла с которым соединен ТекстовыйДокумент
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.TextDocumentContext.TemplateLanguageCode">
            <summary>
            Не используется. Реализован для совместимости API с 1С:Предприятие
            </summary>
            <returns>Строка</returns>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.TextDocumentContext.Parameters">
            <summary>
            Не используется. Реализован для совместимости API с 1С:Предприятие
            </summary>
            <returns>Неопределено</returns>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.TextDocumentContext.ReadOnly">
            <summary>
            Не используется. Реализован для совместимости API с 1С:Предприятие
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.InsertLine(System.Int32,System.String)">
            <summary>
            Вставляет строку в документ
            </summary>
            <param name="position">Позиция вставки</param>
            <param name="line">Вставляемая строка</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.AddLine(System.String)">
            <summary>
            Добавляет строку в конец текстового документа
            </summary>
            <param name="line">Добавляемая строка</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.GetText">
            <summary>
            Получает текст, находящийся в текстовом документе
            </summary>
            <returns></returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.GetLine(System.Int32)">
            <summary>
            Получает строку по номеру
            </summary>
            <param name="lineNumber">Номер строки в тексте</param>
            <returns>Строка</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.ReplaceLine(System.Int32,System.String)">
            <summary>
            Заменяет содержимое строки по номеру
            </summary>
            <param name="number">Номер заменяемой строки</param>
            <param name="newLine">Новое значение строки</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.Clear">
            <summary>
            Очищает содержимое документа
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.SetText(System.String)">
            <summary>
            Устанавливает содержимое текстового документа
            </summary>
            <param name="newText">Новый текст документа</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.DeleteLine(System.Int32)">
            <summary>
            Удаляет строку по номеру
            </summary>
            <param name="lineNumber">Номер удаляемой строки</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.Read(System.String,ScriptEngine.Machine.IValue,System.String)">
            <summary>
            Читает содержимое из файла
            </summary>
            <param name="path">Имя файла</param>
            <param name="encoding">Кодировка</param>
            <param name="lineSeparator">Разделитель строк в файле. FIXME: На данный момент параметр игнорируется, при чтении применяется разделитель для текущей ОС.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextDocumentContext.Write(System.String,ScriptEngine.Machine.IValue,System.String)">
            <summary>
            Записывает содержимое документа в файл
            </summary>
            <param name="path">Путь файла</param>
            <param name="encoding">Кодировка файла</param>
            <param name="lineSeparator">Разделитель строк. По умолчанию - ВК+ПС</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.TextReadImpl">
            <summary>
            Предназначен для последовательного чтения файлов, в том числе большого размера.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextReadImpl.Open(System.String,ScriptEngine.Machine.IValue,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Открывает текстовый файл для чтения. Ранее открытый файл закрывается. 
            </summary>
            <param name="path">Путь к файлу</param>
            <param name="encoding">Кодировка</param>
            <param name="lineDelimiter">Раздедитель строк</param>
            <param name="eolDelimiter">Разделитель строк в файле</param>
            <param name="monopoly">Открывать монопольно</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextReadImpl.ReadAll(System.Int32)">
            <summary>
            Считывает строку указанной длины или до конца файла.
            </summary>
            <param name="size">Размер строки. Если не задан, текст считывается до конца файла</param>
            <returns>Строка - считанная строка, Неопределено - в файле больше нет данных</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextReadImpl.ReadLine(System.String)">
            <summary>
            Считывает очередную строку текстового файла.
            </summary>
            <param name="overridenLineDelimiter">Подстрока, считающаяся концом строки. Переопределяет РазделительСтрок, 
            переданный в конструктор или в метод Открыть</param>
            <returns>Строка - в случае успешного чтения, Неопределено - больше нет данных</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextReadImpl.Close">
            <summary>
            Закрывает открытый текстовый файл. Если файл был открыт монопольно, то после закрытия он становится доступен.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextReadImpl.Constructor(ScriptEngine.Machine.IValue)">
            <summary>
            Открывает текстовый файл для чтения.
            </summary>
            <param name="path">Строка. Путь к файлу</param>
            <returns>ЧтениеТекста</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextReadImpl.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
            <summary>
            Открывает текстовый файл для чтения. Работает аналогично методу Открыть.
            </summary>
            <param name="path">Путь к файлу</param>
            <param name="encoding">Кодировка файла</param>
            <param name="lineDelimiter">Разделитель строк</param>
            <param name="eolDelimiter">Разделитель строк в файле</param>
            <param name="monopoly">Открывать файл монопольно</param>
            <returns>ЧтениеТекста</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextReadImpl.Constructor">
            <summary>
            Создаёт неинициализированный объект. Для инициализации необходимо открыть файл методом Открыть.
            </summary>
            <returns>ЧтениеТекста</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextWriteImpl.Open(System.String,ScriptEngine.Machine.IValue,System.String,System.Boolean,System.String)">
            <summary>
            Открывает файл для записи.
            </summary>
            <param name="path">Путь к файлу</param>
            <param name="encoding">Кодировка (необязательный). По умолчанию используется utf-8</param>
            <param name="lineDelimiter">Разделитель строк (необязательный).</param>
            <param name="append">Признак добавления в конец файла (необязательный)</param>
            <param name="eolReplacement">Разделитель строк в файле (необязательный).</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextWriteImpl.Write(System.String)">
            <summary>
            Записывает текст "как есть"
            </summary>
            <param name="what">Текст для записи</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextWriteImpl.WriteLine(System.String,ScriptEngine.Machine.IValue)">
            <summary>
            Записывает текст и добавляет перевод строки
            </summary>
            <param name="what">Текст для записи</param>
            <param name="delimiter">Разделитель строк</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.TextWriteImpl.Constructor(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
            <summary>
            Создает объект с начальными значениями имени файла и кодировки.
            </summary>
            <param name="path">Имя файла</param>
            <param name="encoding">Кодировка в виде строки</param>
            <param name="lineDelimiter">Символ - разделитель строк</param>
            <param name="append">Признак добавления в конец файла (необязательный)</param>
            <param name="eolReplacement">Разделитель строк в файле (необязательный).</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueList.ValueListImpl">
            <summary>
            Стандартная универсальная коллекция системы 1С:Предприятие 8
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueList.ValueListItem">
            <summary>
            Используется для доступа к свойствам и методам элемента списка значений
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueTable.ValueTable">
            <summary>
            Объект для работы с данными в табличном виде. 
            Представляет из себя коллекцию строк с заранее заданной структурой.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Columns">
            <summary>
            Коллекция колонок
            </summary>
            <value>КоллекцияКолонокТаблицыЗначений</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Indexes">
            <summary>
            Коллекция индексов
            </summary>
            <value>ИндексыКоллекции</value>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Count">
            <summary>
            Количество строк в Таблице значений
            </summary>
            <returns>Число</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Add">
            <summary>
            Добавляет строку в конец Таблицы значений
            </summary>
            <returns>СтрокаТаблицыЗначений</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Insert(System.Int32)">
            <summary>
            Вставляет строку в указанную позицию
            </summary>
            <param name="index">Число - Индекс позиции куда будет произведена вставка</param>
            <returns>СтрокаТаблицыЗначений</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Delete(ScriptEngine.Machine.IValue)">
            <summary>
            Удаляет строку
            </summary>
            <param name="row">
            СтрокаТаблицыЗначений - Удаляемая строка
            Число - Индекс удаляемой строки
            </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.LoadColumn(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
            <summary>
            Загружает значения в колонку
            </summary>
            <param name="values">Массив - Значения для загрузки в колонку</param>
            <param name="columnIndex">
            Строка - Имя колонки для загрузки
            Число - Индекс колонки для загрузки
            КолонкаТаблицыЗначений - Колонка для загрузки
            </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.UnloadColumn(ScriptEngine.Machine.IValue)">
            <summary>
            Выгружает значения колонки в новый массив
            </summary>
            <param name="column">
            Строка - Имя колонки для выгрузки
            Число - Индекс колонки для выгрузки
            КолонкаТаблицыЗначений - Колонка для выгрузки
            </param>
            <returns>Массив</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.FillValues(ScriptEngine.Machine.IValue,System.String)">
            <summary>
            Заполнить колонку/колонки указанным значением
            </summary>
            <param name="value">Произвольный - Устанавливаемое значение</param>
            <param name="columnNames">Строка - Список имен колонок для установки значения (разделены запятыми)</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.IndexOf(ScriptEngine.Machine.IValue)">
            <summary>
            Получить индекс указанной строки
            </summary>
            <param name="row">СтрокаТаблицыЗначений - Строка таблицы значений, для которой необходимо определить индекс</param>
            <returns>Число - Индекс в коллекции, если не найдено возвращает -1</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Total(ScriptEngine.Machine.IValue)">
            <summary>
            Сумма значений всех строк указанной колонки
            </summary>
            <param name="columnIndex">
            Строка - Имя колонки для суммирования
            Число - Индекс колонки для суммирования
            КолонкаТаблицыЗначений - Колонка для суммирования
            </param>
            <returns>Число</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Find(ScriptEngine.Machine.IValue,System.String)">
            <summary>
            Осуществляет поиск значения в указанных колонках
            </summary>
            <param name="value">Произвольный - Искомое значение</param>
            <param name="columnNames">Строка - Список имен колонок для поиска значения (разделены запятыми). 
            Если параметр не указан - ищет по всем колонкам. По умолчанию: пустая строка</param>
            <returns>СтрокаТаблицыЗначений - если строка найдена, иначе Неопределено</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.FindRows(ScriptEngine.Machine.IValue)">
            <summary>
            Поиск строк по условию
            </summary>
            <param name="filter">Структура - Условия поиска. Ключ - имя колонки, значение - искомое значение</param>
            <returns>Массив - Массив ссылок на строки, удовлетворяющих условию поиска</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Clear">
            <summary>
            Удаляет все строки. Структура колонок не меняется.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Get(System.Int32)">
            <summary>
            Получить строку по индексу
            </summary>
            <param name="index">Число - Индекс строки</param>
            <returns>СтрокаТаблицыЗначений</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.GroupBy(System.String,System.String)">
            <summary>
            Сворачиваются (группируются) строки по указанным колонкам измерениям, суммируются колонки ресурсов. 
            Колонки не указанные ни в измерениях ни в ресурсах удаляются.
            </summary>
            <param name="groupColumnNames">Строка - Имена колонок для сворачивания (изменения), разделены запятыми</param>
            <param name="aggregateColumnNames">Строка - Имена колонок для суммирования (ресурсы), разделены запятыми</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Move(ScriptEngine.Machine.IValue,System.Int32)">
            <summary>
            Сдвигает строку на указанное количество позиций.
            </summary>
            <param name="row">
            СтрокаТаблицыЗначений - Строка которую сдвигаем
            Число - Индекс сдвигаемой строки
            </param>
            <param name="offset">Количество строк, на которое сдвигается строка. Если значение положительное - сдвиг вниз, иначе вверх</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.CopyColumns(System.String)">
            <summary>
            Создает новую таблицу значений с указанными колонками. Данные не копируются.
            </summary>
            <param name="columnNames">Строка - Имена колонок для копирования, разделены запятыми</param>
            <returns>ТаблицаЗначений</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Copy(ScriptEngine.Machine.IValue,System.String)">
            <summary>
            Создает новую таблицу значений с указанными строками и колонками. Если передан отбор - копирует строки удовлетворяющие отбору.
            Если не указаны строки - будут скопированы все строки. Если не указаны колонки - будут скопированы все колонки.
            Если не указаны оба параметра - будет создана полная копия таблицы значений.
            </summary>
            <param name="rows">
            Массив - Массив строк для отбора
            Структура - Параметры отбора. Ключ - Колонка, Значение - Значение отбора
            </param>
            <param name="columnNames">Строка - Имена колонок для копирования, разделены запятыми</param>
            <returns>ТаблицаЗначений</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.Sort(System.String,ScriptEngine.Machine.IValue)">
            <summary>
            Сортировать строки в таблице значений. Строки сортируются по порядку следования колонок для сортировки, с учетом варианта сортировки.
            </summary>
            <param name="columns">Строка - Имена колонок для сортировки. 
            После имени колонки, через пробел, можно указать направление сортировки: "Убыв" ("Desc") - по убыванию. Возр" ("Asc") - по возрастанию
            По умолчанию - по возрастанию.
            </param>
            <param name="comparator">СравнениеЗначений - правила сравнения значений при наличии различных типов данных в колонке.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTable.ChooseRow(System.String,ScriptEngine.Machine.IValue)">
            <summary>
            Не поддерживается
            </summary>
            <param name="title"></param>
            <param name="startRow"></param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumn">
            <summary>
            Колонка таблицы значений. 
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumn.Title">
            <summary>
            Заголовок колонки
            </summary>
            <value>Строка</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumn.Name">
            <summary>
            Имя колонки
            </summary>
            <value>Строка</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumn.ValueType">
            <summary>
            Тип значения колонки
            </summary>
            <value>ОписаниеТипа</value>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumn.Width">
            <summary>
            Ширина колонки
            </summary>
            <value>Число</value>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumnCollection">
            <summary>
            Коллекция колонок таблицы значений
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumnCollection.Add(System.String,ScriptEngine.HostedScript.Library.TypeDescription,System.String,System.Int32)">
            <summary>
            Добавляет колонку в таблицу значений
            </summary>
            <param name="name">Строка - Имя колонки</param>
            <param name="type">ОписаниеТипов - Тип данных колонки</param>
            <param name="title">Строка - Заголовок колонки</param>
            <param name="width">Число - Ширина колонки</param>
            <returns>КолонкаТаблицыЗначений</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumnCollection.Insert(System.Int32,System.String,ScriptEngine.HostedScript.Library.TypeDescription,System.String,System.Int32)">
            <summary>
            Вставить колонку в указанную позицию
            </summary>
            <param name="index">Число - Индекс расположения колонки</param>
            <param name="name">Строка - Имя колонки</param>
            <param name="type">ОписаниеТипов - Тип данных колонки</param>
            <param name="title">Строка - Заголовок колонки</param>
            <param name="width">Число - Ширина колонки</param>
            <returns>КолонкаТаблицыЗначений</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumnCollection.IndexOf(ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumn)">
            <summary>
            Индекс указанной колонки
            </summary>
            <param name="column">КолонкаТаблицыЗначений - Колонка, для которой определяется индекс</param>
            <returns>Число</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumnCollection.Count">
            <summary>
            Количество колонок в таблице значений
            </summary>
            <returns>Число</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumnCollection.Find(System.String)">
            <summary>
            Поиск колонки по имени
            </summary>
            <param name="name">Строка - Имя колонки</param>
            <returns>КолонкаТаблицыЗначений - Найденная колонка таблицы значений, иначе Неопределено.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableColumnCollection.Delete(ScriptEngine.Machine.IValue)">
            <summary>
            Удалить колонку значений
            </summary>
            <param name="column">
            Строка - Имя колонки для удаления
            Число - Индекс колонки для удаления
            КолонкаТаблицыЗначений - Колонка для удаления
            </param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableRow.Owner">
            <summary>
            Владелец строки
            </summary>
            <returns>ТаблицаЗначений</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableRow.Get(System.Int32)">
            <summary>
            Получает значение по индексу
            </summary>
            <param name="index">Число - Индекс колонки</param>
            <returns>Произвольный - Значение колонки</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTable.ValueTableRow.Set(System.Int32,ScriptEngine.Machine.IValue)">
            <summary>
            Установить значение
            </summary>
            <param name="index">Число - Индекс колонки</param>
            <param name="value">Произвольный - значение для установки</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueTree.ValueTree">
            <summary>
            Дерево значений.
            Древовидная структура с фунциональностью подобно таблице значений.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTree.Copy(ScriptEngine.Machine.IValue,System.String)">
            <summary>
            Создаёт копию дерева значений.
            </summary>
            <param name="rows">Массив. Строки для копирования. Если не указан, копируются все строки. Необязательный параметр.</param>
            <param name="columnNames">Строка. Список колонок через запятую, которые должны быть скопированы. Необязательный параметр.</param>
            <returns>ДеревоЗначений. Копия исходного дерева значений.</returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumn">
            <summary>
            Колонка дерева значений.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection">
            <summary>
            Коллекция колонок дерева значений.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.Add(System.String,ScriptEngine.HostedScript.Library.TypeDescription,System.String,System.Int32)">
            <summary>
            Добавляет новую колонку.
            </summary>
            <param name="name">Строка. Имя колонки.</param>
            <param name="type">ОписаниеТипов. Доступные типы значений для колонки. Необязательный параметр.</param>
            <param name="title">Строка. Заголовок колонки. Необязательный параметр.</param>
            <param name="width">Число. Ширина колонки. Необязательный параметр.</param>
            <returns>КолонкаДереваЗначений. Добавленная колонка.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.Insert(System.Int32,System.String,ScriptEngine.HostedScript.Library.TypeDescription,System.String,System.Int32)">
            <summary>
            Вставляет новую колонку по указанному индексу.
            </summary>
            <param name="index">Число. Индекс новой колонки.</param>
            <param name="name">Строка. Имя колонки.</param>
            <param name="type">ОписаниеТипов. Доступные типы значений для колонки. Необязательный параметр.</param>
            <param name="title">Строка. Заголовок колонки. Необязательный параметр.</param>
            <param name="width">Число. Ширина колонки. Необязательный параметр.</param>
            <returns>КолонкаДереваЗначений. Добавленная колонка.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.IndexOf(ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumn)">
            <summary>
            Определяет индекс колонки.
            </summary>
            <param name="column">КолонкаДереваЗначений. Колонка.</param>
            <returns>Число. Индекс колонки в коллекции. Если колонка не найдена, возвращается -1.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.Count">
            <summary>
            Возвращает количество колонок.
            </summary>
            <returns>Число. Количество колонокs.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.Find(System.String)">
            <summary>
            Ищет колонку по имени.
            </summary>
            <param name="name">Строка. Имя искомой колонки.</param>
            <returns>КолонкаДереваЗначений, Неопределено. Найденная колонка или Неопределено, если колонка не найдена.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.Delete(ScriptEngine.Machine.IValue)">
            <summary>
            Удаляет колонку.
            </summary>
            <param name="column">КолонкаДереваЗначений. Колонка.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.Get(System.Int32)">
            <summary>
            Получает колонку по индексу.
            </summary>
            <param name="index">Число. Индекс колонки.</param>
            <returns>КолонкаДереваЗначений. Колонка.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.Clear">
            <summary>
            Удаляет все колонки.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeColumnCollection.Move(ScriptEngine.Machine.IValue,System.Int32)">
            <summary>
            Сдвигает колонку на указанное смещение.
            </summary>
            <param name="column">КолонкаДереваЗначений. Колонка.</param>
            <param name="offset">Число. Смещение.</param>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRow">
            <summary>
            Строка дерева значений.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRow.Owner">
            <summary>
            Возвращает дерево значений, в которе входит строка.
            </summary>
            <returns>ДеревоЗначений. Владелец строки.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRow.Get(System.Int32)">
            <summary>
            Получает значение по индексу.
            </summary>
            <param name="index">Число. Индекс получаемого параметра.</param>
            <returns>Произвольный. Получаемое значение.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRow.Set(System.Int32,ScriptEngine.Machine.IValue)">
            <summary>
            Устанавливает значение по индексу.
            </summary>
            <param name="index">Число. Индекс параметра, которому задаётся значение.</param>
            <param name="value">Произвольный. Новое значение.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRow.Level">
            <summary>
            Возвращает уровень вложенности строки в дереве.
            Строки верхнего уровня имеют значение 0.
            </summary>
            <returns>Число. Уровень вложенности строки.</returns>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection">
            <summary>
            Коллекция строк дерева значений.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Owner">
            <summary>
            Возвращает дерево значений, в которе входит строка.
            </summary>
            <returns>ДеревоЗначений. Владелец строки.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Count">
            <summary>
            Возвращает количество строк.
            </summary>
            <returns>Число. Количество строк.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Add">
            <summary>
            Добавляет строку в коллекцию.
            </summary>
            <returns>СтрокаДереваЗначений. Добавленная строка.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Insert(System.Int32)">
            <summary>
            Добавляет строку в коллекцию.
            </summary>
            <param name="index">Число. Индекс новой строки.</param>
            <returns>СтрокаДереваЗначений. Добавленная строка.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Delete(ScriptEngine.Machine.IValue)">
            <summary>
            Удаляет строку из коллекции.
            </summary>
            <param name="row">СтрокаДереваЗначений, Число. Удаляемая строка или её индекс.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.LoadColumn(ScriptEngine.Machine.IValue,ScriptEngine.Machine.IValue)">
            <summary>
            Загружает значения из массива в колонку.
            </summary>
            <param name="values">Массив. Значения.</param>
            <param name="columnIndex">КолонкаДереваЗначений, Число, Строка. Колонка, в которую будут загружены значения, её имя или индекс.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.UnloadColumn(ScriptEngine.Machine.IValue)">
            <summary>
            Загружает значения из массива в колонку.
            </summary>
            <param name="column">КолонкаДереваЗначений, Число, Строка. Колонка, из которой будут выгружены значения, её имя или индекс.</param>
            <returns>Массив. Массив значений.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.IndexOf(ScriptEngine.Machine.IValue)">
            <summary>
            Определяет индекс строки.
            </summary>
            <param name="row">СтрокаДереваЗначений. Строка.</param>
            <returns>Число. Индекс строки в коллекции. Если строка не найдена, возвращается -1.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Total(ScriptEngine.Machine.IValue,System.Boolean)">
            <summary>
            Суммирует значения в строках.
            </summary>
            <param name="columnIndex">КолонкаДереваЗначений, Строка, Число. Колонка, значения которой будут суммироваться.</param>
            <param name="includeChildren">Булево. Если Истина, в расчёт будут включены все вложенные строки.</param>
            <returns>Число. Вычисленная сумма.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Find(ScriptEngine.Machine.IValue,System.String,System.Boolean)">
            <summary>
            Ищет значение в строках дерева значений.
            </summary>
            <param name="value">Произвольный. Искомое значение.</param>
            <param name="columnNames">Строка. Список колонок через запятую, в которых будет производиться поиск. Необязательный параметр.</param>
            <param name="includeChildren">Булево. Если Истина, в поиск будут включены все вложенные строки. Необязательный параметр.</param>
            <returns>СтрокаДереваЗначений, Неопределено. Найденная строка или Неопределено, если строка не найдена.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.FindRows(ScriptEngine.Machine.IValue,System.Boolean)">
            <summary>
            Ищет строки, отвечающие критериям отбора.
            </summary>
            <param name="filter">Структура. Структура, в которой Ключ - это имя колонки, а Значение - искомое значение.</param>
            <param name="includeChildren">Булево. Если Истина, в поиск будут включены все вложенные строки. Необязательный параметр.</param>
            <returns>Массив. Найденные строки.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Clear">
            <summary>
            Удаляет все строки.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Get(System.Int32)">
            <summary>
            Получает строку по индексу.
            </summary>
            <param name="index">Число. Индекс строки.</param>
            <returns>СтрокаДереваЗначений. Строка.</returns>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Move(ScriptEngine.Machine.IValue,System.Int32)">
            <summary>
            Сдвигает строку на указанное смещение.
            </summary>
            <param name="row">СтрокаДереваЗначений. Строка.</param>
            <param name="offset">Число. Смещение.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.Sort(System.String,System.Boolean,ScriptEngine.Machine.IValue)">
            <summary>
            Сортирует строки по указанному правилу.
            </summary>
            <param name="columns">Строка. Правило сортировки: список имён колонок, разделённых запятой. После имени через
             пробел может указываться направление сортировки: Возр(Asc) - по возрастанию, Убыв(Desc) - по убыванию.</param>
            <param name="sortChildren">Булево. Если Истина, сортировка будет применена также к вложенным строкам.</param>
            <param name="comparator">СравнениеЗначений. Не используется.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.ValueTree.ValueTreeRowCollection.ChooseRow(System.String,ScriptEngine.Machine.IValue)">
            <summary>
            Не поддерживается.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Zip.ZipFileEntryContext">
            <summary>
            Описание элемента, находящегося в Zip архиве.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Zip.ZipReader">
            <summary>
            Объект чтения ZIP файлов.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Zip.ZipReader.Open(System.String,System.String)">
            <summary>
            Открывает архив для чтения.
            </summary>
            <param name="filename">Имя ZIP файла, который требуется открыть для чтения.</param>
            <param name="password">Пароль к файлу, если он зашифрован.</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Zip.ZipReader.ExtractAll(System.String,ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.Zip.ZipRestoreFilePathsModeEnum})">
            <summary>
            Извлечение всех файлов из архива
            </summary>
            <param name="where">Строка. Каталог в который извлекаются файлы</param>
            <param name="restorePaths">РежимВосстановленияПутейФайловZIP</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Zip.ZipReader.Extract(ScriptEngine.HostedScript.Library.Zip.ZipFileEntryContext,System.String,ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.Zip.ZipRestoreFilePathsModeEnum},System.String)">
            <summary>
            Извлечение элемента из архива
            </summary>
            <param name="entry">ЭлементZipФайла. Извлекаемый элемент.</param>
            <param name="destination">Каталог, в который извлекается элемент.</param>
            <param name="restorePaths">РежимВосстановленияПутейФайлов</param>
            <param name="password">Пароль элемента (если отличается от пароля к архиву)</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Zip.ZipReader.Close">
            <summary>
            Закрыть архив и освободить объект.
            </summary>
        </member>
        <member name="P:ScriptEngine.HostedScript.Library.Zip.ZipReader.Elements">
            <summary>
            Коллекция элементов архива.
            </summary>
        </member>
        <member name="T:ScriptEngine.HostedScript.Library.Zip.ZipWriter">
            <summary>
            Объект записи ZIP-архивов.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Zip.ZipWriter.Open(System.String,System.String,System.String,ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.Zip.ZipCompressionMethodEnum},ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.Zip.ZipCompressionLevelEnum},ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.Zip.ZipEncryptionMethodEnum})">
            <summary>
            Открыть архив для записи.
            </summary>
            <param name="filename">Имя файла будущего архива</param>
            <param name="password">Пароль на архив</param>
            <param name="comment">Комментарий к архиву</param>
            <param name="compressionMethod">МетодСжатияZIP (Сжатие/Копирование)</param>
            <param name="compressionLevel">УровеньСжатияZIP (Минимальный/Оптимальный/Максимальный)</param>
            <param name="encryptionMethod">МетодШифрованияZIP (в текущей реализации не поддерживается)</param>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Zip.ZipWriter.Write">
            <summary>
            Записывает и закрывает файл архива.
            </summary>
        </member>
        <member name="M:ScriptEngine.HostedScript.Library.Zip.ZipWriter.Add(System.String,ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.Zip.ZipStorePathModeEnum},ScriptEngine.Machine.Contexts.SelfAwareEnumValue{ScriptEngine.HostedScript.Library.Zip.ZIPSubDirProcessingModeEnum})">
            <summary>
            Добавление файла к архиву.
            </summary>
            <param name="file">Имя файла, помещаемого в архив, или маска.</param>
            <param name="storePathMode">РежимСохраненияПутейZIP (НеСохранятьПути/СохранятьОтносительныеПути/СохранятьПолныеПути)</param>
            <param name="recurseSubdirectories">РежимОбработкиПодкаталоговZIP (НеОбрабатывать/ОбрабатыватьРекурсивно)</param>
        </member>
    </members>
</doc>
